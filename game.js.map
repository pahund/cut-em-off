{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/directions/constants.js","webpack:///./src/directions/directionIsAllowed.js","webpack:///./src/utils/degreesToRadians.js","webpack:///./src/utils/getRandomInt.js","webpack:///./src/utils/transformMapCoordinates.js","webpack:///./src/utils/collides.js","webpack:///./src/directions/switchDirection.js","webpack:///./src/directions/directionSwitchMap.js","webpack:///./src/directions/isIntersection.js","webpack:///./src/directions/getNextTile.js","webpack:///./src/directions/isValidTile.js","webpack:///./src/config.js","webpack:///./src/pubsub/pubsub.js","webpack:///./src/loop/createLoop.js","webpack:///./src/pubsub/constants.js","webpack:///./src/loop/utils/moveCamera.js","webpack:///./src/map/mapData.js","webpack:///./src/map/tilesheet/drawCurve.js","webpack:///./src/map/tilesheet/utils/krakel.js","webpack:///./src/map/tilesheet/drawStraight.js","webpack:///./src/map/tilesheet/drawTSection.js","webpack:///./src/map/tilesheet/drawCrossing.js","webpack:///./src/map/tilesheet/drawServer.js","webpack:///./src/map/tilesheet/drawTerminus.js","webpack:///./src/tileEngine/createTileEngine.js","webpack:///./src/tileEngine/utils/flatIndex.js","webpack:///./src/map/createMap.js","webpack:///./src/utils/calculateCameraCoordinates.js","webpack:///./src/map/utils/addPadding.js","webpack:///./src/map/tilesheet/createTilesheet.js","webpack:///./src/messageBox/messageBox.js","webpack:///./src/player/createPlayer.js","webpack:///./src/player/drawPlayer.js","webpack:///./src/utils/calculateRotation.js","webpack:///./src/player/updatePlayer.js","webpack:///./src/player/utils/getKey.js","webpack:///./src/player/utils/isInTheMiddle.js","webpack:///./src/utils/calculateRowAndCol.js","webpack:///./src/user/utils/allInfected.js","webpack:///./src/user/createUser.js","webpack:///./src/user/constants.js","webpack:///./src/user/drawUser.js","webpack:///./src/virus/createVirus.js","webpack:///./src/virus/updateVirus.js","webpack:///./src/virus/utils/moveVirus.js","webpack:///./src/virus/utils/isInTheMiddle.js","webpack:///./src/virus/utils/getBestDirections.js","webpack:///./src/directions/getOppositeDirection.js","webpack:///./src/virus/drawVirus.js","webpack:///./src/virus/createBlip.js","webpack:///./src/virus/drawBlip.js","webpack:///./src/virus/Blips.js","webpack:///./src/bomb/createBomb.js","webpack:///./src/bomb/constants.js","webpack:///./src/bomb/drawBomb.js","webpack:///./src/bomb/drawBombWithFuse.js","webpack:///./src/bomb/updateBomb.js","webpack:///./src/bomb/createShrapnel.js","webpack:///./src/bomb/drawShrapnel.js","webpack:///./src/index.js","webpack:///./src/canvas/createCanvas.js","webpack:///./src/bomb/Bombs.js","webpack:///./src/user/Users.js","webpack:///./src/utils/multiCollides.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","N","E","S","W","directionIsAllowed","map","x","y","direction","tile","tileAtLayer","isValidTile","directionSwitchMap","allowed","includes","nextTile","getNextTile","degreesToRadians","degrees","Math","PI","getRandomInt","a","b","min","max","floor","random","transformMapCoordinates","row","col","tileWidth","tileHeight","sx","sy","undefined","config_canvasWidth","config_canvasHeight","collides","sprite1","sprite2","dx","dy","sqrt","collisionRadius","switchDirection","curr","Error","nextDirection","change","otherDirections","filter","dir","length","1","[object Object]","2","3","4","5","6","9","10","11","12","13","14","17","18","19","20","38","intersectionTiles","entries","push","Number","config_tileWidth","config_tileHeight","pubsub","this","subscribers","message","callback","incomingMessage","payload","forEach","createLoop","player","virus","users","bombs","shipMoving","subscribe","kontra","gameLoop","update","infect","moveCamera","render","mapData","calculatePointOnArc","deg","cos","sin","drawCurve","ctx","broken","save","translate","rotate","lineWidth","strokeStyle","beginPath","moveTo","arc","lineTo","stroke","restore","krakel","data","draw","drawStraight","drawTSection","drawCrossing","drawServer","drawTerminus","createTileEngine","properties","width","height","mapWidth","mapHeight","context","canvasWidth","canvas","canvasHeight","offscreenCanvas","document","createElement","offscreenContext","getContext","sxMax","syMax","_sx","_sy","layerOrder","tileEngine","tilesets","layers","addTilesets","concat","tileset","tilesetImage","image","firstGrid","lastTileset","tiles","Infinity","path","lastIndexOf","substr","assets","images","numTiles","lastGrid","sort","addLayers","layer","Array","isArray","zIndex","prop","JSON","parse","e","layerIndex","dataIndex","len","renderTile","preRenderImage","layerId","flatIndex","layerCollidesWith","getRow","getCol","endRow","endCol","index","getIndex","position","drawImage","renderLayer","startX","startY","viewWidth","ceil","tileOffset","w","count","getTileset","_layerOrder","currTile","clear","clearRect","createMap","calculateCameraCoordinates","config_mapWidth","config_mapHeight","paddedMap","arr","h","retVal","idx","addPadding","Image","src","toDataURL","Promise","resolve","setTimeout","createTilesheet","fill","messageBox","timeoutHandler","div","style","cssText","getElementById","appendChild","clearTimeout","transition","innerHTML","backgroundColor","color","createPlayer","infected","gameOver","dropBomb","scale","dropping","bombCoolingDown","updatePlayer","drawPlayer","show","publish","sprite","calculateRotation","fillStyle","closePath","keys","pressed","getKey","isInTheMiddle","calculateRowAndCol","mapX","mapY","status","drawUser","spriteMapping","0","fg","bg","createVirus","blips","Blips","updateVirus","drawVirus","start","updateVirus_visits","moveVirus","utils_isInTheMiddle","isIntersection","bestDirections","viable","visits","minVis","MAX_SAFE_INTEGER","vis","getBestDirections","getOppositeDirection","createBlip","ttl","radius","drawBlip","setInterval","blip","createBomb","fuseLength","FUSE_BURNING","shrapnel","explosionDuration","updateBomb","drawBomb","drawBombWithFuse","fuseDeg","sparkCX","sparkCY","sparkX","sparkY","fillRect","createShrapnel","changeTile","speed","rotation","rotationDir","drawShrapnel","createCanvas","init","mapCoords","find","bomb","createUser","user","viruses","userVirusCollisions","arr1","arr2","collisions","i1","i2","multiCollides","every","state","allInfected","flash"],"mappings":"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AA,MACjBD,EAAAE,OACAF,EAAAG,WAAA9E,EAAA,GAAA8C,IAAA,GAAA/C,EAAA,GAAAgD,IAAA,GACA4B,EAAAK,UAAA,EACAL,EAAAM,YVsBA,UUrBAN,EAAAO,YAEAM,EAAAb,EADAC,IAEA,WACA,WACA,WACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,YACA,YACA,YACA,YACA,YACA,YACA,UACA,WACA,WACA,aAIA,YACA,YACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,WAGAD,EAAAW,SACAX,EAAAY,WCrDAO,EAAA,EAAiBnB,MAAA5E,MAAAC,MAAA4E,aACjBD,EAAAE,OACAF,EAAAG,WAAA9E,EAAA,GAAA8C,IAAA,GAAA/C,EAAA,GAAAgD,IAAA,GACA4B,EAAAK,UAAA,EACAL,EAAAM,YXsBA,UWrBAN,EAAAO,YACAM,EAAAb,IACA,WACA,WACA,UACA,UACA,WACA,WACA,YACA,YACA,YAEAA,EAAAW,SACAV,IACAD,EAAAK,UAAA,EACAQ,EAAAb,IACA,WACA,UACA,WACA,WACA,WACA,WACA,YACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,SACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,YACA,UACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEAA,EAAAW,UAEAX,EAAAY,WCzEAQ,EAAA,EAAiBpB,MAAA5E,MAAAC,MAAAuE,MAAAK,UAAA,MACjBD,EAAAE,OACAF,EAAAG,WAAA9E,EAAA,GAAA8C,IAAA,GAAA/C,EAAA,GAAAgD,IAAA,GACA4B,EAAAI,OAAA5F,EAAAoF,IACAI,EAAAK,UAAA,EACAL,EAAAM,YZoBA,UYnBAN,EAAAO,YAEAM,EAAAb,EADAC,IACA,0EAEA,yCAEAD,EAAAW,SACAX,EAAAY,WCAAS,EAAA,CAAAC,QAGA,IAAAA,EAAAC,QAAAD,EAAAE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","file":"game.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const N = 'N';\nexport const E = 'E';\nexport const S = 'S';\nexport const W = 'W';\n","import { directionSwitchMap, getNextTile, isValidTile } from '.';\n\nexport default (map, { x, y }, direction) => {\n    const tile = map.tileAtLayer('main', { x, y });\n    if (!isValidTile(tile) || !directionSwitchMap[tile].allowed.includes(direction)) {\n        return false;\n    }\n    const nextTile = getNextTile(map, { x, y }, direction);\n    return isValidTile(nextTile);\n};\n","export default degrees => (degrees * Math.PI) / 180;\n","export default (a, b) => {\n    const min = Math.min(a, b);\n    const max = Math.max(a, b);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","import { canvasHeight, canvasWidth } from '../config';\n\n/**\n * Transforms coordinates relative to the map (either row/col or x/y)\n * to coordinates on the canvas.\n *\n * @param map The map to calculate the coordinates from\n * @param row The row on the map (use either this or y)\n * @param col The column on the map (use either this x)\n * @param x The X coordinate on the map (use either this or col)\n * @param y The Y coordinate on the map (use either this or row)\n * @return {{x: number, y: number}}\n */\nexport default (map, { row, col, x, y }) => {\n    const { tileWidth, tileHeight, sx, sy } = map;\n    const calcX = x !== undefined ? x : (col - 1) * tileWidth;\n    const calcY = y !== undefined ? y : (row - 1) * tileHeight;\n    const nextX = calcX - sx + canvasWidth / 2 + tileWidth / 2;\n    const nextY = calcY - sy + canvasHeight / 2 + tileHeight / 2;\n    return { x: nextX, y: nextY };\n};\n","export default (sprite1, sprite2) => {\n    const dx = sprite1.x - sprite2.x;\n    const dy = sprite1.y - sprite2.y;\n    return Math.sqrt(dx * dx + dy * dy) < sprite1.collisionRadius + sprite2.collisionRadius;\n};\n","import { directionSwitchMap, directionIsAllowed, isValidTile } from '.';\nimport { getRandomInt } from '../utils';\n\nexport default (map, { x, y }, curr) => {\n    const tile = map.tileAtLayer('main', { x, y });\n    /* player accidentally stepped onto a broken conduit tile */\n    if (!isValidTile(tile)) {\n        throw new Error('dropped');\n    }\n    const nextDirection = directionSwitchMap[tile].change[curr] || curr;\n    if (directionIsAllowed(map, { x, y }, nextDirection)) {\n        return nextDirection;\n    }\n    const otherDirections = directionSwitchMap[tile].allowed.filter(dir => directionIsAllowed(map, { x, y }, dir));\n    switch (otherDirections.length) {\n        case 0:\n            /* oh no, player locked themselves in! */\n            throw new Error('locked in');\n        case 1:\n            return otherDirections[0];\n        default:\n            return otherDirections[getRandomInt(0, otherDirections.length - 1)];\n    }\n};\n","import { N, E, S, W } from '.';\n\nexport default {\n    // curve from S to E\n    1: {\n        allowed: [S, E],\n        change: {\n            [N]: E,\n            [W]: S\n        }\n    },\n    // curve from W to S\n    2: {\n        allowed: [W, S],\n        change: {\n            [N]: W,\n            [E]: S\n        }\n    },\n    // straight from N to S\n    3: {\n        allowed: [N, S],\n        change: {}\n    },\n    // T section W, N, E\n    4: {\n        allowed: [W, N, E],\n        change: {\n            [S]: N\n        }\n    },\n    // T section N, E, S\n    5: {\n        allowed: [N, E, S],\n        change: {\n            [W]: E\n        }\n    },\n    // T section W, E, S\n    6: {\n        allowed: [W, E, S],\n        change: {\n            [N]: S\n        }\n    },\n    // curve from N to E\n    9: {\n        allowed: [N, E],\n        change: {\n            [S]: E,\n            [W]: N\n        }\n    },\n    // curve from W to N\n    10: {\n        allowed: [W, N],\n        change: {\n            [E]: N,\n            [S]: W\n        }\n    },\n    // straight from W to E\n    11: {\n        allowed: [W, E],\n        change: {}\n    },\n    // crossing\n    12: {\n        allowed: [N, E, S, W],\n        change: {}\n    },\n    // T section N, S, W\n    13: {\n        allowed: [N, S, W],\n        change: {\n            [E]: W\n        }\n    },\n    // server\n    14: {\n        allowed: [N, S],\n        change: {}\n    },\n    // terminus S\n    17: {\n        allowed: [S],\n        change: {\n            [N]: S\n        }\n    },\n    // terminus W\n    18: {\n        allowed: [W],\n        change: {\n            [E]: W\n        }\n    },\n    // terminus N\n    19: {\n        allowed: [N],\n        change: {\n            [S]: N\n        }\n    },\n    // terminus E\n    20: {\n        allowed: [E],\n        change: {\n            [W]: E\n        }\n    },\n    // broken server\n    38: {\n        allowed: [N, S],\n        change: {}\n    }\n};\n","import { directionSwitchMap } from './index';\n\nconst intersectionTiles = [];\nfor (const [tile, { allowed }] of Object.entries(directionSwitchMap)) {\n    if (allowed.length > 2) {\n        intersectionTiles.push(Number(tile));\n    }\n}\n\nexport default tile => intersectionTiles.includes(tile);\n","import { N, E, S, W } from '.';\nimport { tileHeight, tileWidth } from '../config';\n\nexport default (map, { x, y }, direction) =>\n    map.tileAtLayer('main', {\n        x: direction === E ? x + tileWidth : direction === W ? x - tileWidth : x,\n        y: direction === N ? y - tileHeight : direction === S ? y + tileHeight : y\n    });\n","export default tile => tile < 25 || (tile > 30 && tile < 33) || (tile > 37 && tile < 41) || tile > 44;\n","import { N, W } from './directions';\n\nexport const canvasWidth = 800;\nexport const canvasHeight = 600;\n\n/* map */\nexport const tileWidth = 100;\nexport const tileHeight = 100;\nexport const mapWidth = 20;\nexport const mapHeight = 20;\nexport const mapPaddingX = 4;\nexport const mapPaddingY = 3;\n\n/* player */\nexport const playerStartCol = 5;\nexport const playerStartRow = 6;\nexport const playerStartDirection = N;\nexport const playerSpeed = 5;\n\n/* virus */\nexport const virusStartCol = 5;\nexport const virusStartRow = 4;\nexport const virusStartDirection = W;\nexport const virusSpeed = 2.5;\nexport const virusBlipInterval = 1000;\nexport const virusBlipTtl = 180;\n\n/* colors */\nexport const lightGreen = '#75a042';\nexport const darkGreen = '#365b1d';\nexport const lightBlue = '#52638a';\nexport const darkBlue = '#2b3653';\nexport const lightRed = '#cd3926';\nexport const darkRed = '#7a2431';\n\nexport const collisionRadius = 30;\nexport const bombCooldown = 100;\n","// exported for testing\nexport class Pubsub {\n    constructor() {\n        this.subscribers = [];\n    }\n    subscribe(message, callback) {\n        this.subscribers.push({ message, callback });\n    }\n    publish(incomingMessage, payload) {\n        this.subscribers.forEach(({ message, callback }) => message === incomingMessage && callback(payload));\n    }\n}\n\nexport default new Pubsub();\n","/* global kontra */\n\nimport { moveCamera } from './utils';\nimport { calculateRowAndCol } from '../utils';\nimport { pubsub, DROP_SHIP } from '../pubsub';\n\nexport default ({ map, player, virus, users, bombs }) => {\n    const times = [];\n    let fps;\n    let shipMoving = true;\n    pubsub.subscribe(DROP_SHIP, () => (shipMoving = false));\n\n    return kontra.gameLoop({\n        update() {\n            virus.update();\n            player.update();\n            player.infect(virus);\n            if (shipMoving) {\n                moveCamera(map, player.direction);\n            }\n            users.update();\n            users.infect([virus]);\n            bombs.update();\n        },\n        render() {\n            map.render();\n            users.render();\n            bombs.render();\n            player.render();\n            virus.render();\n            if (process.env.NODE_ENV === 'development') {\n                const now = performance.now();\n                while (times.length > 0 && times[0] <= now - 1000) {\n                    times.shift();\n                }\n                times.push(now);\n                fps = times.length;\n                const { row, col } = calculateRowAndCol(map);\n\n                // eslint-disable-next-line no-param-reassign\n                window.devbox.innerHTML = `${fps} fps – sx=${map.sx}, sy=${map.sy}, row=${row}, col=${col}`;\n            }\n        }\n    });\n};\n","export const GAME_OVER = 0;\nexport const DROP_BOMB = 1;\nexport const DROP_SHIP = 2;\n","import { playerSpeed } from '../../config';\nimport { N, E, S, W } from '../../directions';\n\nexport default (map, direction) => {\n    switch (direction) {\n        case N:\n            // eslint-disable-next-line no-param-reassign\n            map.sy -= playerSpeed;\n            break;\n        case E:\n            // eslint-disable-next-line no-param-reassign\n            map.sx += playerSpeed;\n            break;\n        case S:\n            // eslint-disable-next-line no-param-reassign\n            map.sy += playerSpeed;\n            break;\n        case W:\n            // eslint-disable-next-line no-param-reassign\n            map.sx -= playerSpeed;\n            break;\n        default:\n    }\n};\n","// prettier-ignore\nexport default [\n    0, 17,  0,  0,  0, 17,  0,  0,  0, 17,  0,  0,  0, 17,  0,  0,  0, 17,  0,  0,\n   20,  4, 11,  2,  1,  4,  2,  0,  0,  5, 11,  6, 11, 13,  0,  1, 11, 12,  2,  0,\n    0,  1, 11, 10,  9, 11, 13,  0,  0,  3,  0,  3,  0,  5, 11, 13,  0,  3,  3,  0,\n    0,  3,  1, 11,  6, 11, 10,  0,  1,  4,  2,  9, 11, 13,  0,  9, 11, 10,  3,  0,\n    0,  3,  3,  0,  3,  0,  0,  0,  3,  1, 13,  0,  0,  3,  0,  0,  0,  0,  5, 18,\n    0,  3,  3,  0, 14,  0,  1, 11, 10,  3,  9, 11,  6,  4, 11,  6,  2,  0,  3,  0,\n    0,  3,  3,  0,  3,  0,  3,  0,  0,  3,  0,  0,  3,  0,  0,  3,  3,  0,  3,  0,\n    0,  9, 13,  0,  5, 11, 10,  0,  0,  3,  1, 11, 10,  0,  0,  3,  3,  0,  3,  0,\n    0,  0,  3,  0,  3,  0,  0,  0,  1,  4, 10,  0,  0,  0,  0,  3,  5, 11,  4, 18,\n    0,  1, 13,  0,  5, 11,  2,  0,  3,  0,  1, 11, 11, 11, 11, 12, 10,  0,  0,  0,\n    0,  3,  3,  0,  3,  0,  5, 11, 13,  0,  9, 11,  2,  0,  0,  3,  0,  0,  1, 18,\n    0,  9, 10,  0,  5, 11, 10,  0,  9, 11, 11, 11, 12, 11,  6, 10,  0,  0,  3,  0,\n    0,  0,  0,  0,  3,  1, 11,  2,  1, 11, 11, 11, 10,  0,  3,  0,  1, 11,  4, 18,\n   20,  6,  6, 11, 10,  3,  0,  3,  3,  0,  0,  0,  1,  2,  9, 11, 12, 11,  2,  0,\n    0,  3,  3,  0,  0,  3,  0,  3,  3,  1, 11,  2,  3,  3,  0,  0,  3,  0,  3,  0,\n    0,  5,  4,  2,  0,  5, 11, 10,  3,  3,  0,  5, 12,  4, 11, 11, 13,  0,  5, 18,\n    0,  3,  0,  5, 11, 12, 11,  6, 10,  9,  6, 10,  3,  0,  0,  0,  9, 11, 10,  0,\n   20,  4, 11, 13,  0,  3,  0,  9, 11, 11, 13,  0,  9, 11,  6, 11,  6,  6, 11, 18,\n    0,  0,  0,  3,  0,  3,  0,  0,  0,  0,  5, 11, 11,  2,  3,  0,  3,  3,  0,  0,\n    0,  0,  0, 19,  0, 19,  0,  0,  0,  0, 19,  0,  0, 19,  9, 11, 10, 19,  0,  0\n];\n","/* eslint-disable no-param-reassign */\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { tileHeight, tileWidth, lightBlue } from '../../config';\n\nfunction calculatePointOnArc(deg, r) {\n    return [Math.cos(deg2rad(deg)) * r + 50, Math.sin(deg2rad(deg)) * r + 50];\n}\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        ctx.moveTo(20, 50);\n        ctx.arc(50, 50, 30, deg2rad(180), deg2rad(190));\n        ctx.moveTo(...calculatePointOnArc(190, 30));\n        ctx.lineTo(10, 45);\n        ctx.lineTo(10, 35);\n        ctx.lineTo(-10, 40);\n        ctx.lineTo(...calculatePointOnArc(190, 70));\n        ctx.arc(50, 50, 70, deg2rad(190), deg2rad(180), true);\n        ctx.moveTo(50, 20);\n        ctx.arc(50, 50, 30, deg2rad(270), deg2rad(260), true);\n        ctx.moveTo(...calculatePointOnArc(260, 30));\n        ctx.lineTo(40, 10);\n        ctx.lineTo(45, 0);\n        ctx.lineTo(35, 0);\n        ctx.lineTo(...calculatePointOnArc(260, 70));\n        ctx.arc(50, 50, 70, deg2rad(260), deg2rad(270));\n    } else {\n        ctx.moveTo(20, 50);\n        ctx.arc(50, 50, 30, deg2rad(180), deg2rad(270));\n        ctx.moveTo(-20, 50);\n        ctx.arc(50, 50, 70, deg2rad(180), deg2rad(270));\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* creates canvas moveTo and lineTo commands from arrays; doing this mostly to save a couple of bytes */\nexport default (ctx, data) => data.forEach(([draw, x, y]) => ctx[draw ? 'lineTo' : 'moveTo'](x, y));\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [\n            [0, -20, 50],\n            [1, -20, 30],\n            [1, -10, 40],\n            [1, 0, 25],\n            [1, 10, 35],\n            [1, 20, 30],\n            [1, 20, 50],\n            [0, -20, -50],\n            [1, -20, -40],\n            [1, -10, -25],\n            [1, 0, -35],\n            [1, 10, -30],\n            [1, 20, -40],\n            [1, 20, -50]\n        ]);\n    } else {\n        krakel(ctx, [[0, -20, -50], [1, -20, 50], [0, 20, -50], [1, 20, 50]]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [\n            [0, 50, 20],\n            [1, 40, 20],\n            [1, 45, 10],\n            [1, 40, -10],\n            [1, 45, -20],\n            [1, 50, -20],\n            [0, 20, -50],\n            [1, 20, -35],\n            [1, 10, -40],\n            [1, 0, -30],\n            [1, -10, -40],\n            [1, -20, -35],\n            [1, -20, -50],\n            [0, -50, -20],\n            [1, -40, -20],\n            [1, -35, -10],\n            [1, -45, 0],\n            [1, -30, 10],\n            [1, -35, 20],\n            [1, -50, 20]\n        ]);\n    } else {\n        krakel(ctx, [\n            [0, -20, -50],\n            [1, -20, -20],\n            [1, -50, -20],\n            [0, 20, -50],\n            [1, 20, -20],\n            [1, 50, -20],\n            [0, -50, 20],\n            [1, 50, 20]\n        ]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [\n            [0, -20, 50],\n            [1, -20, 45],\n            [1, -10, 40],\n            [1, 0, 45],\n            [1, 10, 35],\n            [1, 20, 40],\n            [1, 20, 50],\n            [0, 50, 20],\n            [1, 40, 20],\n            [1, 45, 10],\n            [1, 40, -10],\n            [1, 45, -20],\n            [1, 50, -20],\n            [0, 20, -50],\n            [1, 20, -35],\n            [1, 10, -40],\n            [1, 0, -30],\n            [1, -10, -40],\n            [1, -20, -35],\n            [1, -20, -50],\n            [0, -50, -20],\n            [1, -40, -20],\n            [1, -35, -10],\n            [1, -45, 0],\n            [1, -30, 10],\n            [1, -35, 20],\n            [1, -50, 20]\n        ]);\n    } else {\n        krakel(ctx, [\n            [0, -20, -50],\n            [1, -20, -20],\n            [1, -50, -20],\n            [0, 20, -50],\n            [1, 20, -20],\n            [1, 50, -20],\n            [0, -50, 20],\n            [1, -20, 20],\n            [1, -20, 50],\n            [0, 50, 20],\n            [1, 20, 20],\n            [1, 20, 50]\n        ]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, broken }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    krakel(ctx, [\n        [0, 30, -48],\n        [1, 48, -30],\n        [1, 48, 30],\n        [1, 30, 48],\n        [1, -30, 48],\n        [1, -48, 30],\n        [1, -48, -30],\n        [1, -30, -48],\n        [1, 30, -48]\n    ]);\n    ctx.stroke();\n    if (broken) {\n        ctx.lineWidth = 2;\n        krakel(ctx, [\n            [0, 10, -48],\n            [1, 0, -40],\n            [0, 24, -48],\n            [1, 20, -30],\n            [0, 48, -27],\n            [1, 20, -20],\n            [0, -10, -30],\n            [1, 10, -30],\n            [1, 30, -10],\n            [1, 20, 0],\n            [1, 10, 0],\n            [0, 48, 7],\n            [1, 30, 10],\n            [0, 20, 0],\n            [1, 30, 10],\n            [1, 10, 20],\n            [0, 30, 48],\n            [1, 30, 30],\n            [1, 10, 30],\n            [0, 20, 20],\n            [1, 20, 30],\n            [0, -10, 48],\n            [1, -10, 20],\n            [1, 0, 10],\n            [0, -20, 0],\n            [1, -20, 20],\n            [1, -10, 30],\n            [0, -30, 48],\n            [1, -20, 40],\n            [1, -20, 30],\n            [0, -30, 30],\n            [1, -20, 40],\n            [0, -48, 20],\n            [1, -30, 20],\n            [0, -40, 20],\n            [1, -40, 10],\n            [0, -48, 0],\n            [1, -30, 0],\n            [1, -20, -10],\n            [0, -40, 0],\n            [1, -30, 10],\n            [0, -48, -17],\n            [1, -40, -30],\n            [1, -30, -20],\n            [0, -30, -48],\n            [1, -10, -20],\n            [1, -10, -10],\n            [0, -20, -30],\n            [1, -20, -20],\n            [1, -30, -10]\n        ]);\n        ctx.stroke();\n    }\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [[0, -20, 50], [1, -20, 40], [1, -10, 45], [1, 0, 35], [1, 10, 45], [1, 20, 40], [1, 20, 50]]);\n    } else {\n        krakel(ctx, [[0, -20, 50], [1, -20, 0], [1, 20, 0], [1, 20, 50]]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* global kontra */\nimport { flatIndex } from './utils';\n\n/**\n * A tile engine for rendering tilesets. Works well with the tile engine program Tiled.\n * @memberof kontra\n *\n * @param {object} properties - Properties of the tile engine.\n * @param {number} [properties.tileWidth=32] - Width of a tile.\n * @param {number} [properties.tileHeight=32] - Height of a tile.\n * @param {number} properties.width - Width of the map (in tiles).\n * @param {number} properties.height - Height of the map (in tiles).\n * @param {number} [properties.x=0] - X position to draw.\n * @param {number} [properties.y=0] - Y position to draw.\n * @param {number} [properties.sx=0] - X position to clip the tileset.\n * @param {number} [properties.sy=0] - Y position to clip the tileset.\n * @param {Context} [properties.context=kontra.context] - Provide a context for the tile engine to draw on.\n */\nexport default (properties = {}) => {\n    // size of the map (in tiles)\n    // @if DEBUG\n    if (!properties.width || !properties.height) {\n        throw Error('You must provide width and height properties');\n    }\n    // @endif\n    const width = properties.width;\n    const height = properties.height;\n\n    // size of the tiles. Most common tile size on opengameart.org seems to be 32x32,\n    // followed by 16x16\n    // Tiled names the property tilewidth and tileheight\n    const tileWidth = properties.tileWidth || 32;\n    const tileHeight = properties.tileHeight || 32;\n\n    const mapWidth = width * tileWidth;\n    const mapHeight = height * tileHeight;\n\n    const context = properties.context || kontra.context;\n    const canvasWidth = context.canvas.width;\n    const canvasHeight = context.canvas.height;\n\n    // create an off-screen canvas for pre-rendering the map\n    // @see http://jsperf.com/render-vs-prerender\n    const offscreenCanvas = document.createElement('canvas');\n    const offscreenContext = offscreenCanvas.getContext('2d');\n\n    // when clipping an image, sx and sy must within the image region, otherwise\n    // Firefox and Safari won't draw it.\n    // @see http://stackoverflow.com/questions/19338032/canvas-indexsizeerror-index-or-size-is-negative-or-greater-than-the-allowed-a\n    const sxMax = Math.max(0, mapWidth - canvasWidth);\n    const syMax = Math.max(0, mapHeight - canvasHeight);\n\n    let _sx, _sy;\n\n    // draw order of layers (by name)\n    const layerOrder = [];\n\n    const tileEngine = {\n        width,\n        height,\n\n        tileWidth,\n        tileHeight,\n\n        mapWidth,\n        mapHeight,\n\n        context,\n\n        x: properties.x || 0,\n        y: properties.y || 0,\n\n        tilesets: [],\n        layers: {},\n\n        /**\n         * Add an tileset for the tile engine to use.\n         * @memberof kontra.tileEngine\n         */\n        addTilesets: function addTilesets(tilesets) {\n            [].concat(tilesets).forEach(tileset => {\n                const tilesetImage = tileset.image;\n                let image, firstGrid, lastTileset, tiles;\n\n                // @see https://github.com/jed/140bytes/wiki/Byte-saving-techniques#coercion-to-test-for-types\n                if (`${tilesetImage}` === tilesetImage) {\n                    let i = Infinity;\n\n                    while (i >= 0) {\n                        i = tilesetImage.lastIndexOf('/', i);\n                        const path = i < 0 ? tilesetImage : tilesetImage.substr(i);\n\n                        if (kontra.assets.images[path]) {\n                            image = kontra.assets.images[path];\n                            break;\n                        }\n\n                        i--;\n                    }\n                } else {\n                    image = tilesetImage;\n                }\n\n                firstGrid = tileset.firstGrid;\n\n                // if the width or height of the provided image is smaller than the tile size,\n                // default calculation to 1\n                const numTiles = ((image.width / tileWidth) | 0 || 1) * ((image.height / tileHeight) | 0 || 1);\n\n                if (!firstGrid) {\n                    // only calculate the first grid if the tile map has a tileset already\n                    if (tileEngine.tilesets.length > 0) {\n                        lastTileset = tileEngine.tilesets[tileEngine.tilesets.length - 1];\n                        tiles =\n                            ((lastTileset.image.width / tileWidth) | 0) * ((lastTileset.image.height / tileHeight) | 0);\n\n                        firstGrid = lastTileset.firstGrid + tiles;\n                    }\n                    // otherwise this is the first tile added to the tile map\n                    else {\n                        firstGrid = 1;\n                    }\n                }\n\n                tileEngine.tilesets.push({\n                    firstGrid,\n                    lastGrid: firstGrid + numTiles - 1,\n                    image\n                });\n\n                // sort the tile map so we can perform a binary search when drawing\n                tileEngine.tilesets.sort((a, b) => a.firstGrid - b.firstGrid);\n            });\n        },\n\n        /**\n         * Add a layer to the tile engine.\n         * @memberof kontra.tileEngine\n         */\n        addLayers: function addLayers(layers) {\n            [].concat(layers).forEach(layer => {\n                // eslint-disable-next-line no-param-reassign\n                layer.render = layer.render === undefined ? true : layer.render;\n\n                let data, row, c, value;\n\n                // flatten a 2D array into a single array\n                if (Array.isArray(layer.data[0])) {\n                    data = [];\n\n                    // eslint-disable-next-line no-cond-assign\n                    for (let r = 0; (row = layer.data[r]); r++) {\n                        for (c = 0; c < width; c++) {\n                            data.push(row[c] || 0);\n                        }\n                    }\n                } else {\n                    data = layer.data;\n                }\n\n                tileEngine.layers[layer.name] = {\n                    data,\n                    zIndex: layer.zIndex || 0,\n                    render: layer.render\n                };\n\n                // merge properties of layer onto layer object\n                for (const prop in layer.properties) {\n                    if (layer.properties.hasOwnProperty(prop)) {\n                        value = layer.properties[prop];\n\n                        try {\n                            value = JSON.parse(value);\n                        } catch (e) {\n                            /* intentionally empty */\n                        }\n\n                        tileEngine.layers[layer.name][prop] = value;\n                    }\n                }\n\n                // only add the layer to the layer order if it should be drawn\n                if (tileEngine.layers[layer.name].render) {\n                    layerOrder.push(layer.name);\n\n                    layerOrder.sort((a, b) => tileEngine.layers[a].zIndex - tileEngine.layers[b].zIndex);\n                }\n            });\n\n            preRenderImage();\n        },\n\n        changeTile(layerId, { row, col }, tile) {\n            const dataIndex = flatIndex(row, col, width);\n            const layer = tileEngine.layers[layerId];\n            layer.data[dataIndex] = tile;\n            renderTile(layer, dataIndex, true);\n        },\n\n        /**\n         * Simple bounding box collision test for layer tiles.\n         * @memberof kontra.tileEngine\n         *\n         * @param {string} name - Name of the layer.\n         * @param {object} object - Object to check collision against.\n         * @param {number} object.x - X coordinate of the object.\n         * @param {number} object.y - Y coordinate of the object.\n         * @param {number} object.width - Width of the object.\n         * @param {number} object.height - Height of the object.\n         *\n         * @returns {boolean} True if the object collides with a tile, false otherwise.\n         */\n        layerCollidesWith: function layerCollidesWith(name, object) {\n            // calculate all tiles that the object can collide with\n            const row = tileEngine.getRow(object.y);\n            const col = tileEngine.getCol(object.x);\n\n            const endRow = tileEngine.getRow(object.y + object.height);\n            const endCol = tileEngine.getCol(object.x + object.width);\n\n            // check all tiles\n            let index;\n            for (let r = row; r <= endRow; r++) {\n                for (let c = col; c <= endCol; c++) {\n                    index = getIndex({ row: r, col: c });\n\n                    if (tileEngine.layers[name].data[index]) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Get the tile from the specified layer at x, y or row, col.\n         * @memberof kontra.tileEngine\n         *\n         * @param {string} name - Name of the layer.\n         * @param {object} position - Position of the tile in either x, y or row, col.\n         * @param {number} position.x - X coordinate of the tile.\n         * @param {number} position.y - Y coordinate of the tile.\n         * @param {number} position.row - Row of the tile.\n         * @param {number} position.col - Col of the tile.\n         *\n         * @returns {number}\n         */\n        tileAtLayer(name, position) {\n            const index = getIndex(position);\n\n            if (index >= 0) {\n                return tileEngine.layers[name].data[index];\n            }\n            return undefined;\n        },\n\n        /**\n         * Render the pre-rendered canvas.\n         * @memberof kontra.tileEngine\n         */\n        render() {\n            tileEngine.context.drawImage(\n                offscreenCanvas,\n                tileEngine.sx,\n                tileEngine.sy,\n                canvasWidth,\n                canvasHeight,\n                tileEngine.x,\n                tileEngine.y,\n                canvasWidth,\n                canvasHeight\n            );\n        },\n\n        /**\n         * Render a specific layer.\n         * @memberof kontra.tileEngine\n         *\n         * @param {string} name - Name of the layer to render.\n         */\n        renderLayer: function renderLayer(name) {\n            const layer = tileEngine.layers[name];\n\n            // calculate the starting tile\n            let row = tileEngine.getRow();\n            const col = tileEngine.getCol();\n            let index = getIndex({ row, col });\n\n            // calculate where to start drawing the tile relative to the drawing canvas\n            const startX = col * tileWidth - tileEngine.sx;\n            const startY = row * tileHeight - tileEngine.sy;\n\n            // calculate how many tiles the drawing canvas can hold\n            const viewWidth = Math.min(Math.ceil(canvasWidth / tileWidth) + 1, width);\n            const viewHeight = Math.min(Math.ceil(canvasHeight / tileHeight) + 1, height);\n            const numTiles = viewWidth * viewHeight;\n\n            let count = 0;\n            let x, y, tile, tileset, image, tileOffset, w, sx, sy;\n\n            // draw just enough of the layer to fit inside the drawing canvas\n            while (count < numTiles) {\n                tile = layer.data[index];\n\n                if (tile) {\n                    tileset = getTileset(tile);\n                    image = tileset.image;\n\n                    x = startX + (count % viewWidth) * tileWidth;\n                    y = startY + ((count / viewWidth) | 0) * tileHeight;\n\n                    tileOffset = tile - tileset.firstGrid;\n                    w = image.width / tileWidth;\n\n                    sx = (tileOffset % w) * tileWidth;\n                    sy = ((tileOffset / w) | 0) * tileHeight;\n\n                    tileEngine.context.drawImage(image, sx, sy, tileWidth, tileHeight, x, y, tileWidth, tileHeight);\n                }\n\n                if (++count % viewWidth === 0) {\n                    index = col + ++row * width;\n                } else {\n                    index++;\n                }\n            }\n        },\n\n        /**\n         * Get the row from the y coordinate.\n         * @memberof kontra.tileEngine\n         *\n         * @param {number} y - Y coordinate.\n         *\n         * @return {number}\n         */\n        getRow(y) {\n            // eslint-disable-next-line no-param-reassign\n            y = y || 0;\n\n            return ((tileEngine.sy + y) / tileHeight) | 0;\n        },\n\n        /**\n         * Get the col from the x coordinate.\n         * @memberof kontra.tileEngine\n         *\n         * @param {number} x - X coordinate.\n         *\n         * @return {number}\n         */\n        getCol(x) {\n            // eslint-disable-next-line no-param-reassign\n            x = x || 0;\n\n            return ((tileEngine.sx + x) / tileWidth) | 0;\n        },\n\n        get sx() {\n            return _sx;\n        },\n\n        get sy() {\n            return _sy;\n        },\n\n        // ensure sx and sy are within the image region\n        set sx(value) {\n            _sx = Math.min(Math.max(0, value), sxMax);\n        },\n\n        set sy(value) {\n            _sy = Math.min(Math.max(0, value), syMax);\n        },\n\n        // expose properties for testing\n        // @if DEBUG\n        _layerOrder: layerOrder\n        // @endif\n    };\n\n    // set here so we use setter function\n    tileEngine.sx = properties.sx || 0;\n    tileEngine.sy = properties.sy || 0;\n\n    // make the off-screen canvas the full size of the map\n    offscreenCanvas.width = mapWidth;\n    offscreenCanvas.height = mapHeight;\n\n    // merge properties of the tile engine onto the tile engine itself\n    for (const prop in properties.properties) {\n        if (properties.properties.hasOwnProperty(prop)) {\n            let value = properties.properties[prop];\n\n            try {\n                value = JSON.parse(value);\n            } catch (e) {\n                /* intentionally empty */\n            }\n\n            // passed in properties override properties.properties\n            tileEngine[prop] = tileEngine[prop] || value;\n        }\n    }\n\n    if (properties.tilesets) {\n        tileEngine.addTilesets(properties.tilesets);\n    }\n\n    if (properties.layers) {\n        tileEngine.addLayers(properties.layers);\n    }\n\n    /**\n     * Get the index of the x, y or row, col.\n     * @memberof kontra.tileEngine\n     * @private\n     *\n     * @param {number} position.x - X coordinate of the tile.\n     * @param {number} position.y - Y coordinate of the tile.\n     * @param {number} position.row - Row of the tile.\n     * @param {number} position.col - Col of the tile.\n     *\n     * @return {number} Returns the tile index or -1 if the x, y or row,\n     *         col is outside the dimensions of the tile engine.\n     */\n    function getIndex(position) {\n        let row, col;\n\n        if (typeof position.x !== 'undefined' && typeof position.y !== 'undefined') {\n            row = tileEngine.getRow(position.y);\n            col = tileEngine.getCol(position.x);\n        } else {\n            row = position.row;\n            col = position.col;\n        }\n\n        // don't calculate out of bound numbers\n        if (row < 0 || col < 0 || row >= height || col >= width) {\n            return -1;\n        }\n\n        return col + row * width;\n    }\n\n    /**\n     * Modified binary search that will return the tileset associated with the tile\n     * @memberof kontra.tileEngine\n     * @private\n     *\n     * @param {number} tile - Tile grid.\n     *\n     * @return {object}\n     */\n    function getTileset(tile) {\n        let min = 0;\n        let max = tileEngine.tilesets.length - 1;\n        let index, currTile;\n\n        while (min <= max) {\n            index = ((min + max) / 2) | 0;\n            currTile = tileEngine.tilesets[index];\n\n            if (tile >= currTile.firstGrid && tile <= currTile.lastGrid) {\n                return currTile;\n            } else if (currTile.lastGrid < tile) {\n                min = index + 1;\n            } else {\n                max = index - 1;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Pre-render the tiles to make drawing fast.\n     * @memberof kontra.tileEngine\n     * @private\n     */\n    function preRenderImage() {\n        // draw each layer in order\n        // eslint-disable-next-line no-cond-assign\n        for (let layerIndex = 0, layer; (layer = tileEngine.layers[layerOrder[layerIndex]]); layerIndex++) {\n            for (let dataIndex = 0, len = layer.data.length; dataIndex < len; dataIndex++) {\n                renderTile(layer, dataIndex);\n            }\n        }\n    }\n\n    function renderTile(layer, dataIndex, clear = false) {\n        const tile = layer.data[dataIndex];\n\n        // skip empty tiles (0)\n        if (!tile) {\n            return;\n        }\n\n        const tileset = getTileset(tile);\n        const image = tileset.image;\n\n        const x = (dataIndex % width) * tileWidth;\n        const y = ((dataIndex / width) | 0) * tileHeight;\n\n        const tileOffset = tile - tileset.firstGrid;\n        const w = image.width / tileWidth;\n\n        const sx = (tileOffset % w) * tileWidth;\n        const sy = ((tileOffset / w) | 0) * tileHeight;\n\n        if (clear) {\n            offscreenContext.clearRect(x, y, tileWidth, tileHeight);\n        }\n        offscreenContext.drawImage(image, sx, sy, tileWidth, tileHeight, x, y, tileWidth, tileHeight);\n    }\n\n    return tileEngine;\n};\n","export default (row, col, width) => (row - 1) * width + col - 1;\n","/* global kontra */\n\nimport {\n    tileHeight,\n    tileWidth,\n    mapHeight as height,\n    mapWidth as width,\n    mapPaddingX,\n    mapPaddingY,\n    playerStartCol,\n    playerStartRow\n} from '../config';\nimport { calculateCameraCoordinates } from '../utils';\nimport mapData from './mapData';\nimport { addPadding } from './utils';\nimport { createTilesheet } from './tilesheet';\nimport { createTileEngine } from '../tileEngine';\n\nexport default async () => {\n    const { sx, sy } = calculateCameraCoordinates({ col: playerStartCol, row: playerStartRow });\n    const map = createTileEngine({\n        // tile size\n        tileWidth,\n        tileHeight,\n\n        // map size in tiles\n        width: width + mapPaddingX * 2,\n        height: height + mapPaddingY * 2,\n\n        sx,\n        sy\n    });\n\n    const paddedMap = addPadding(mapData, width, height, mapPaddingX, mapPaddingY);\n    const image = await createTilesheet();\n    map.addTilesets({ image });\n    // map.addTilesets({ image: kontra.assets.images.tilesheet });\n    map.addLayers([\n        {\n            name: 'main',\n            data: paddedMap\n        },\n        {\n            name: 'debug',\n            data: new Array(paddedMap.length).fill(0)\n        }\n        // {\n        //     name: 'grid',\n        //     data: new Array(paddedMap.length).fill(8)\n        // }\n    ]);\n    return map;\n};\n","import { tileHeight, tileWidth } from '../config';\n\nexport default ({ col, row }) => ({\n    sx: (col - 1) * tileWidth + tileWidth / 2,\n    sy: (row - 1) * tileHeight + tileHeight / 2\n});\n","export default (arr, w, h, x, y) => {\n    const retVal = [];\n    let idx = 0;\n    for (let row = 0; row < h + y * 2; row++) {\n        for (let col = 0; col < w + x * 2; col++) {\n            if (row < y || row >= y + h || col < x || col >= x + w) {\n                retVal.push(0);\n                continue;\n            }\n            retVal.push(arr[idx++]);\n        }\n    }\n    return retVal;\n};\n","import { tileHeight, tileWidth } from '../../config';\nimport { drawCurve, drawStraight, drawTSection, drawCrossing, drawServer, drawTerminus } from '.';\n\nexport default () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 8 * tileWidth;\n    canvas.height = 8 * tileHeight;\n    const ctx = canvas.getContext('2d');\n    drawCurve({ ctx, row: 1, col: 1, deg: 0 });\n    drawCurve({ ctx, row: 1, col: 2, deg: 90 });\n    drawCurve({ ctx, row: 2, col: 1, deg: 270 });\n    drawCurve({ ctx, row: 2, col: 2, deg: 180 });\n    drawStraight({ ctx, row: 1, col: 3, deg: 0 });\n    drawStraight({ ctx, row: 2, col: 3, deg: 90 });\n    drawTSection({ ctx, row: 1, col: 4, deg: 0 });\n    drawTSection({ ctx, row: 1, col: 5, deg: 90 });\n    drawTSection({ ctx, row: 1, col: 6, deg: 180 });\n    drawTSection({ ctx, row: 2, col: 5, deg: 270 });\n    drawCrossing({ ctx, row: 2, col: 4 });\n    drawTerminus({ ctx, row: 3, col: 1, deg: 0 });\n    drawTerminus({ ctx, row: 3, col: 2, deg: 90 });\n    drawTerminus({ ctx, row: 3, col: 3, deg: 180 });\n    drawTerminus({ ctx, row: 3, col: 4, deg: 270 });\n    drawServer({ ctx, row: 2, col: 6 });\n    drawCurve({ ctx, row: 4, col: 1, deg: 0, broken: true });\n    drawCurve({ ctx, row: 4, col: 2, deg: 90, broken: true });\n    drawCurve({ ctx, row: 5, col: 1, deg: 270, broken: true });\n    drawCurve({ ctx, row: 5, col: 2, deg: 180, broken: true });\n    drawStraight({ ctx, row: 4, col: 3, deg: 0, broken: true });\n    drawStraight({ ctx, row: 5, col: 3, deg: 90, broken: true });\n    drawTSection({ ctx, row: 4, col: 4, deg: 0, broken: true });\n    drawTSection({ ctx, row: 4, col: 5, deg: 90, broken: true });\n    drawTSection({ ctx, row: 4, col: 6, deg: 180, broken: true });\n    drawTSection({ ctx, row: 5, col: 5, deg: 270, broken: true });\n    drawCrossing({ ctx, row: 5, col: 4, broken: true });\n    drawTerminus({ ctx, row: 6, col: 1, deg: 0, broken: true });\n    drawTerminus({ ctx, row: 6, col: 2, deg: 90, broken: true });\n    drawTerminus({ ctx, row: 6, col: 3, deg: 180, broken: true });\n    drawTerminus({ ctx, row: 6, col: 4, deg: 270, broken: true });\n    drawServer({ ctx, row: 5, col: 6, broken: true });\n    if (process.env.NODE_ENV === 'development') {\n        require('./drawDebugGrid').default({ ctx, row: 1, col: 8 });\n    }\n    const image = new Image();\n    image.src = canvas.toDataURL('image/png');\n    // document.getElementById('wrapper').appendChild(image);\n    return new Promise(resolve => setTimeout(() => resolve(image), 100));\n};\n","class MessageBox {\n    constructor() {\n        this.timeoutHandler = null;\n        this.div = document.createElement('div');\n        this.div.style.cssText = `\nbackground-color: rgba(0,0,0,0);\nfont-size: 3em;\nfont-weight: bold;\nalign-items: center;\njustify-content: center;\ndisplay: flex;\ncolor: rgba(255,255,255,0);\nposition: absolute;\ntop: 0;\nleft:0;\nwidth: 100vw;\nheight: 100vh;\ntext-align: center;\npointer-events: none;\ntransition: background-color 3s ease-out, color 3s ease-out;\ntext-transform: uppercase;\nfont-family: monospace;\n    `;\n        const wrapper = document.getElementById('wrapper');\n        wrapper.appendChild(this.div);\n    }\n\n    show(message) {\n        clearTimeout(this.timeoutHandler);\n        this.div.style.transition = '3s';\n        this.div.innerHTML = `<div>${message}</div>`;\n        this.div.style.backgroundColor = 'rgba(0,0,0,0.5)';\n        this.div.style.color = 'rgba(255,255,255,1)';\n    }\n\n    flash(message) {\n        clearTimeout(this.timeoutHandler);\n        this.div.style.transition = '0.5s';\n        this.div.innerHTML = `<div>${message}</div>`;\n        this.div.style.color = 'rgba(255,255,255,1)';\n        this.timeoutHandler = setTimeout(() => (this.div.style.color = 'rgba(255,255,255,0)'), 500);\n    }\n}\nexport default new MessageBox();\n","/* global kontra */\n\nimport { drawPlayer, updatePlayer } from '.';\nimport { canvasHeight, canvasWidth, playerStartDirection, collisionRadius } from '../config';\nimport { pubsub, GAME_OVER, DROP_SHIP } from '../pubsub';\nimport { collides } from '../utils';\nimport { messageBox } from '../messageBox';\n\nexport default map => {\n    const player = {\n        context: kontra.context,\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        collisionRadius,\n        map,\n        infected: false,\n        gameOver: false,\n        direction: playerStartDirection,\n        nextDirection: null,\n        dropBomb: false,\n        scale: 1,\n        dropping: false,\n        bombCoolingDown: false,\n\n        update() {\n            ({\n                nextDirection: this.nextDirection,\n                direction: this.direction,\n                dropBomb: this.dropBomb,\n                scale: this.scale,\n                bombCoolingDown: this.bombCoolingDown\n            } = updatePlayer(this, pubsub, messageBox));\n        },\n\n        render() {\n            drawPlayer(this);\n        },\n\n        infect(virus) {\n            if (collides(virus, this)) {\n                // eslint-disable-next-line no-param-reassign\n                this.infected = true;\n                if (!this.gameOver) {\n                    messageBox.show('player infected<br>game over');\n                    pubsub.publish(GAME_OVER);\n                }\n            }\n        }\n    };\n\n    pubsub.subscribe(GAME_OVER, () => (player.gameOver = true));\n    pubsub.subscribe(DROP_SHIP, () => (player.dropping = true));\n\n    return player;\n};\n","import { lightGreen, darkGreen, lightRed, darkRed } from '../config';\nimport { calculateRotation } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, direction, infected, scale } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.scale(scale, scale);\n    ctx.rotate(calculateRotation(direction));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = infected ? lightRed : lightGreen;\n    ctx.fillStyle = infected ? darkRed : darkGreen;\n    ctx.beginPath();\n    ctx.moveTo(-15, 25);\n    ctx.lineTo(0, -25);\n    ctx.lineTo(15, 25);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n};\n","import { degreesToRadians } from '.';\nimport { N, E, S, W } from '../directions';\n\nexport default direction => {\n    switch (direction) {\n        case N:\n            return degreesToRadians(0);\n        case E:\n            return degreesToRadians(90);\n        case S:\n            return degreesToRadians(180);\n        case W:\n            return degreesToRadians(270);\n        default:\n            return null;\n    }\n};\n","import { directionIsAllowed, switchDirection } from '../directions';\nimport { pubsub, DROP_BOMB, DROP_SHIP, GAME_OVER } from '../pubsub';\nimport { getKey, isInTheMiddle } from './utils';\nimport { calculateRowAndCol } from '../utils';\nimport { messageBox } from '../messageBox';\nimport { bombCooldown } from '../config';\n\nexport default sprite => {\n    let { nextDirection, direction, dropBomb, scale, bombCoolingDown } = sprite;\n    const { dropping } = sprite;\n    if (dropping) {\n        if (scale > 0) {\n            scale -= 0.01;\n        } else {\n            messageBox.show('You fell into the abyss<br>Game over');\n            pubsub.publish(GAME_OVER);\n        }\n        return { direction, nextDirection, dropBomb, scale, bombCoolingDown };\n    }\n    const { map, x, y, gameOver } = sprite;\n    if (!gameOver) {\n        ({ nextDirection, dropBomb } = getKey(sprite));\n        if (bombCoolingDown) {\n            dropBomb = false;\n        }\n    }\n    if (!isInTheMiddle({ x: map.sx, y: map.sy })) {\n        return { direction, nextDirection, dropBomb, scale, bombCoolingDown };\n    }\n    if (nextDirection && directionIsAllowed(map, { x, y }, nextDirection)) {\n        direction = nextDirection;\n        nextDirection = null;\n    } else {\n        try {\n            direction = switchDirection(map, { x, y }, direction);\n        } catch ({ message }) {\n            if (message === 'dropped') {\n                pubsub.publish(DROP_SHIP);\n            }\n        }\n    }\n    if (dropBomb) {\n        pubsub.publish(DROP_BOMB, calculateRowAndCol(map));\n        dropBomb = false;\n        bombCoolingDown = true;\n        setTimeout(() => {\n            // eslint-disable-next-line no-param-reassign\n            sprite.bombCoolingDown = false;\n        }, bombCooldown);\n    }\n    return { direction, nextDirection, dropBomb, scale, bombCoolingDown };\n};\n","/* global kontra */\n\nimport { N, E, S, W } from '../../directions';\n\nexport default sprite => {\n    let { nextDirection, dropBomb } = sprite;\n    if (kontra.keys.pressed('right')) {\n        nextDirection = E;\n    }\n    if (kontra.keys.pressed('left')) {\n        nextDirection = W;\n    }\n    if (kontra.keys.pressed('up')) {\n        nextDirection = N;\n    }\n    if (kontra.keys.pressed('down')) {\n        nextDirection = S;\n    }\n    if (kontra.keys.pressed('space')) {\n        dropBomb = true;\n    }\n    return { nextDirection, dropBomb };\n};\n","import { tileHeight, tileWidth } from '../../config';\n\nexport default ({ x, y }) => (x - tileWidth / 2) % tileWidth === 0 && (y - tileHeight / 2) % tileHeight === 0;\n","export default ({ sx, sy, tileWidth, tileHeight }) => ({\n    col: Math.floor(sx / tileWidth) + 1,\n    row: Math.floor(sy / tileHeight) + 1\n});\n","import { INFECTED } from '../constants';\n\nexport default users => users.every(user => user.state === INFECTED);\n","/* global kontra */\n\nimport { drawUser, INFECTED } from '.';\nimport { tileWidth, tileHeight, collisionRadius } from '../config';\nimport { transformMapCoordinates } from '../utils';\nimport { ONLINE } from '.';\n\nexport default ({ map, row, col }) => {\n    const { x, y } = transformMapCoordinates(map, { row, col });\n    return {\n        context: kontra.context,\n        x,\n        y,\n        collisionRadius,\n        infected: false,\n        map,\n        mapX: (col - 1) * tileWidth,\n        mapY: (row - 1) * tileHeight,\n        status: ONLINE,\n        update() {\n            ({ x: this.x, y: this.y } = transformMapCoordinates(this.map, { x: this.mapX, y: this.mapY }));\n        },\n        render() {\n            drawUser(this);\n        },\n        infect() {\n            this.status = INFECTED;\n        }\n    };\n};\n","export const ONLINE = 0;\nexport const OFFLINE = 1;\nexport const INFECTED = 2;\n","/* global kontra */\nimport { lightBlue, darkBlue, lightGreen, darkGreen, lightRed, darkRed } from '../config';\nimport { ONLINE, OFFLINE, INFECTED } from './constants';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nconst spriteMapping = {\n    [ONLINE]: { fg: lightBlue, bg: darkBlue },\n    [OFFLINE]: { fg: lightGreen, bg: darkGreen },\n    [INFECTED]: { fg: lightRed, bg: darkRed }\n};\n\nexport default sprite => {\n    const { context: ctx, x, y, status } = sprite;\n    const { fg, bg } = spriteMapping[status];\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = fg;\n    ctx.fillStyle = bg;\n    ctx.beginPath();\n    ctx.moveTo(-40, 40);\n    ctx.lineTo(-40, 20);\n    ctx.arc(-20, 20, 20, deg2rad(180), deg2rad(270));\n    ctx.moveTo(-20, 0);\n    ctx.lineTo(20, 0);\n    ctx.arc(20, 20, 20, deg2rad(270), deg2rad(0));\n    ctx.lineTo(40, 40);\n    ctx.lineTo(-40, 40);\n    ctx.moveTo(-23, 20);\n    ctx.lineTo(-23, 40);\n    ctx.moveTo(23, 20);\n    ctx.lineTo(23, 40);\n    ctx.fill();\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(0, -15, 25, deg2rad(0), deg2rad(360));\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { virusStartDirection, virusStartCol, virusStartRow, tileWidth, tileHeight, collisionRadius } from '../config';\nimport { transformMapCoordinates } from '../utils';\nimport { drawVirus, updateVirus, Blips } from '.';\n\nexport default map => {\n    const { x, y } = transformMapCoordinates(map, { row: virusStartRow, col: virusStartCol });\n    const blips = new Blips();\n    const virus = {\n        context: kontra.context,\n        x,\n        y,\n        collisionRadius,\n        map,\n        mapX: (virusStartCol - 1) * tileWidth,\n        mapY: (virusStartRow - 1) * tileHeight,\n        direction: virusStartDirection,\n        blips,\n        update() {\n            ({ x: this.x, y: this.y, mapX: this.mapX, mapY: this.mapY, direction: this.direction } = updateVirus(this));\n            this.blips.update();\n        },\n        render() {\n            drawVirus(this);\n            this.blips.render();\n        }\n    };\n    blips.start(virus);\n\n    return virus;\n};\n","import {\n    switchDirection,\n    isIntersection,\n    directionSwitchMap,\n    getOppositeDirection,\n    directionIsAllowed\n} from '../directions';\nimport { transformMapCoordinates, getRandomInt } from '../utils';\nimport { isInTheMiddle, moveVirus, getBestDirection } from './utils';\nimport { mapWidth, mapHeight, tileWidth, tileHeight } from '../config';\n\nconst visits = Array(mapHeight)\n    .fill()\n    .map(() => Array(mapWidth).fill(0));\n\nexport default sprite => {\n    let { direction, x, y } = sprite;\n    const { map } = sprite;\n    const { mapX, mapY } = moveVirus(sprite);\n    if (isInTheMiddle({ mapX, mapY })) {\n        const tile = map.tileAtLayer('main', { x, y });\n        const col = mapX / tileWidth + 1;\n        const row = mapY / tileHeight + 1;\n        visits[row - 1][col - 1] = visits[row - 1][col - 1] + 1;\n        if (isIntersection(tile)) {\n            const { allowed } = directionSwitchMap[tile];\n            const viable = allowed.filter(\n                dir => dir !== getOppositeDirection(direction) && directionIsAllowed(map, { x, y }, dir)\n            );\n            const bestDirections = getBestDirection({ viable, visits, row, col });\n            direction = bestDirections[getRandomInt(0, bestDirections.length - 1)];\n        } else {\n            direction = switchDirection(map, { x, y }, direction);\n        }\n    }\n    ({ x, y } = transformMapCoordinates(map, { x: mapX, y: mapY }));\n    return {\n        direction,\n        mapY,\n        mapX,\n        x,\n        y\n    };\n};\n","import { N, E, S, W } from '../../directions';\nimport { virusSpeed } from '../../config';\n\nexport default ({ mapX, mapY, direction }) => {\n    switch (direction) {\n        case N:\n            return { mapX, mapY: mapY - virusSpeed };\n        case E:\n            return { mapX: mapX + virusSpeed, mapY };\n        case S:\n            return { mapX, mapY: mapY + virusSpeed };\n        case W:\n            return { mapX: mapX - virusSpeed, mapY };\n        default:\n            return { mapX, mapY };\n    }\n};\n","import { tileHeight, tileWidth } from '../../config';\n\nexport default ({ mapX, mapY }) => mapX % tileWidth === 0 && mapY % tileHeight === 0;\n","import { N, E, S, W } from '../../directions';\n\nexport default ({ viable, visits, row, col }) => {\n    let minVis = Number.MAX_SAFE_INTEGER;\n    return viable\n        .map(dir => {\n            let vis;\n            switch (dir) {\n                case N:\n                    vis = visits[row - 2][col - 1];\n                    break;\n                case E:\n                    vis = visits[row - 1][col];\n                    break;\n                case S:\n                    vis = visits[row][col - 1];\n                    break;\n                case W:\n                    vis = visits[row - 1][col - 2];\n                    break;\n                default:\n            }\n            minVis = vis < minVis ? vis : minVis;\n            return { dir, vis };\n        })\n        .filter(({ vis }) => vis === minVis)\n        .map(({ dir }) => dir);\n};\n","import { N, E, S, W } from '.';\n\nexport default direction => {\n    switch (direction) {\n        case N:\n            return S;\n        case E:\n            return W;\n        case S:\n            return N;\n        case W:\n            return W;\n        default:\n            return null;\n    }\n};\n","import { lightRed, darkRed } from '../config';\nimport { getRandomInt as ri } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightRed;\n    ctx.fillStyle = darkRed;\n    ctx.beginPath();\n    ctx.moveTo(ri(-5, 5), ri(-5, -25)); // 1\n    ctx.lineTo(ri(5, 50), ri(-5, -50)); // 2\n    ctx.lineTo(ri(5, 25), ri(-5, 5)); // 3\n    ctx.lineTo(ri(5, 50), ri(5, 50)); // 4\n    ctx.lineTo(ri(-5, 5), ri(5, 25)); // 5\n    ctx.lineTo(ri(-5, -50), ri(5, 50)); // 6\n    ctx.lineTo(ri(-5, -25), ri(-5, 5)); // 7\n    ctx.lineTo(ri(-5, -50), ri(-5, -50)); // 8\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { tileHeight, virusBlipTtl } from '../config';\nimport { drawBlip } from '.';\n\nexport default ({ x, y }) => ({\n    context: kontra.context,\n    x,\n    y,\n    ttl: virusBlipTtl,\n    radius: tileHeight,\n    update() {\n        this.radius += 10;\n        this.ttl--;\n    },\n    render() {\n        drawBlip(this);\n    }\n});\n","import { lightRed } from '../config';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, radius } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = lightRed;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, deg2rad(0), deg2rad(360));\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.restore();\n};\n","import { virusBlipInterval } from '../config';\nimport { createBlip } from '.';\n\nexport default class {\n    constructor() {\n        this.blips = [];\n    }\n\n    start(virus) {\n        setInterval(() => {\n            this.blips.push(createBlip({ x: virus.x, y: virus.y }));\n        }, virusBlipInterval);\n    }\n    update() {\n        this.blips.forEach(blip => blip.update());\n        this.blips = this.blips.filter(blip => blip.ttl > 0);\n    }\n    render() {\n        this.blips.forEach(blip => blip.render());\n    }\n}\n","/* global kontra */\n\nimport { collisionRadius, tileHeight, tileWidth } from '../config';\nimport { transformMapCoordinates } from '../utils';\nimport { drawBomb, updateBomb } from '.';\nimport { FUSE_BURNING } from '.';\n\nexport default (map, { row, col }) => {\n    const { x, y } = transformMapCoordinates(map, { row, col });\n    return {\n        context: kontra.context,\n        x,\n        y,\n        collisionRadius,\n        fuseLength: 100,\n        status: FUSE_BURNING,\n        shrapnel: [],\n        explosionDuration: 0,\n        map,\n        mapX: (col - 1) * tileWidth,\n        mapY: (row - 1) * tileHeight,\n        row,\n        col,\n        update() {\n            ({\n                status: this.status,\n                fuseLength: this.fuseLength,\n                explosionDuration: this.explosionDuration,\n                x: this.x,\n                y: this.y\n            } = updateBomb(this));\n        },\n        render() {\n            drawBomb(this);\n        }\n    };\n};\n","export const FUSE_BURNING = 0;\nexport const EXPLODING = 1;\nexport const EXPLODED = 2;\n","import { EXPLODING, FUSE_BURNING } from './constants';\nimport { drawBombWithFuse } from '.';\n\nexport default sprite => {\n    const { status, shrapnel } = sprite;\n    switch (status) {\n        case FUSE_BURNING:\n            drawBombWithFuse(sprite);\n            break;\n        case EXPLODING:\n            shrapnel.forEach(s => s.render());\n            break;\n        default:\n    }\n};\n","import { lightRed, lightBlue, darkBlue } from '../config';\nimport { getRandomInt as ri } from '../utils';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, fuseLength } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(deg2rad(-45));\n\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.fillStyle = darkBlue;\n\n    /* bomb */\n    ctx.beginPath();\n    ctx.moveTo(23, -10);\n    ctx.lineTo(40, -10);\n    ctx.lineTo(40, 10);\n    ctx.lineTo(23, 10);\n    ctx.arc(0, 0, 25, deg2rad(19), deg2rad(341));\n    ctx.fill();\n    ctx.stroke();\n\n    /* fuse */\n    const fuseRad = 25; // radius of the fuse arc\n    const fuseDeg = (fuseLength / 100) * 90; // length of the fuse arc in degrees\n    ctx.beginPath();\n    ctx.moveTo(40, 0);\n    ctx.arc(40, 25, fuseRad, deg2rad(270), deg2rad(270 + fuseDeg));\n    ctx.stroke();\n\n    /* sparks */\n    const sparkCX = Math.cos(deg2rad(fuseDeg - 90)) * fuseRad + 40; // X-coord of sparks center\n    const sparkCY = Math.sin(deg2rad(fuseDeg - 90)) * fuseRad + 25; // Y-coord of sparks centers\n    const sparkRad = 15; // radius of the sparks circle\n    ctx.fillStyle = lightRed;\n    for (let i = 0; i < 10; i++) {\n        const sparkX = Math.cos(deg2rad(ri(0, 360))) * ri(0, sparkRad) + sparkCX;\n        const sparkY = Math.sin(deg2rad(ri(0, 360))) * ri(0, sparkRad) + sparkCY;\n        ctx.fillRect(sparkX - 1, sparkY - 1, 3, 3);\n    }\n\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { FUSE_BURNING, EXPLODING, EXPLODED } from '.';\nimport { createShrapnel } from '.';\nimport { transformMapCoordinates } from '../utils';\nimport { mapPaddingX, mapPaddingY } from '../config';\n\nexport default sprite => {\n    let { status, fuseLength, explosionDuration, x, y } = sprite;\n    const { shrapnel, map, mapX, mapY, row, col } = sprite;\n\n    ({ x, y } = transformMapCoordinates(map, { x: mapX, y: mapY }));\n    switch (status) {\n        case FUSE_BURNING:\n            fuseLength -= 1;\n            if (fuseLength < 0) {\n                status = EXPLODING;\n                for (let i = 0; i < 50; i++) {\n                    shrapnel.push(createShrapnel({ x, y }));\n                }\n                const tile = map.tileAtLayer('main', { row: row + mapPaddingY - 1, col: col + mapPaddingX - 1 });\n                map.changeTile('main', { row: row + mapPaddingY, col: col + mapPaddingX }, tile + 24);\n            }\n            break;\n        case EXPLODING:\n            shrapnel.forEach(s => s.update());\n            explosionDuration++;\n            if (explosionDuration === 200) {\n                status = EXPLODED;\n            }\n            break;\n        default:\n    }\n    return {\n        status,\n        fuseLength,\n        explosionDuration,\n        x,\n        y\n    };\n};\n","/* global kontra */\nimport { getRandomInt as ri } from '../utils';\nimport { degreesToRadians as deg2rad } from '../utils';\nimport { drawShrapnel } from '.';\n\nexport default ({ x, y }) => {\n    const dir = ri(0, 360);\n    const speed = ri(5, 15);\n    return {\n        context: kontra.context,\n        x,\n        y,\n        dx: Math.cos(deg2rad(dir)) * speed,\n        dy: Math.sin(deg2rad(dir)) * speed,\n        rotation: ri(0, 360),\n        rotationDir: [ri(-10, -1), ri(1, 10)][ri(0, 1)],\n        update() {\n            this.x += this.dx;\n            this.y += this.dy;\n            this.rotation += this.rotationDir;\n        },\n        render() {\n            drawShrapnel(this);\n        }\n    };\n};\n","import { lightBlue, darkBlue } from '../config';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, rotation } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(deg2rad(rotation));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.fillStyle = darkBlue;\n    ctx.beginPath();\n    ctx.moveTo(0, -10);\n    ctx.lineTo(10, 5);\n    ctx.lineTo(-10, 5);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { createCanvas } from './canvas';\nimport { createLoop } from './loop';\nimport { createMap } from './map';\nimport { createPlayer } from './player';\nimport { Users } from './user';\nimport { createVirus } from './virus';\nimport { Bombs } from './bomb';\n\nif (process.env.NODE_ENV === 'development') {\n    require('./devbox/createDevbox').default();\n}\n\n(async () => {\n    createCanvas();\n    kontra.init();\n    const map = await createMap();\n    const player = createPlayer(map);\n    const virus = createVirus(map);\n    const bombs = new Bombs(map);\n    const users = new Users(map);\n    const loop = createLoop({ map, player, virus, users, bombs });\n    loop.start();\n})();\n","import { canvasHeight, canvasWidth, lightBlue } from '../config';\n\nexport default () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvas.style.cssText = `\n        border: 4px solid ${lightBlue};\n    `;\n    const wrapper = document.getElementById('wrapper');\n    wrapper.appendChild(canvas);\n};\n","import { pubsub, DROP_BOMB } from '../pubsub';\nimport { EXPLODED } from './constants';\nimport { createBomb } from '.';\n\nexport default class {\n    constructor(map) {\n        this.map = map;\n        this.bombs = [];\n        pubsub.subscribe(DROP_BOMB, mapCoords => this.dropBomb(mapCoords));\n    }\n    dropBomb(mapCoords) {\n        if (\n            this.bombs.length > 0 &&\n            this.bombs.find(({ col, row }) => col === mapCoords.col && row === mapCoords.row)\n        ) {\n            // don't drop a bomb where there already is one waiting to explode\n            return;\n        }\n        this.bombs.push(createBomb(this.map, mapCoords));\n    }\n    update() {\n        this.bombs = this.bombs.filter(bomb => {\n            bomb.update();\n            return bomb.status !== EXPLODED;\n        });\n    }\n    render() {\n        this.bombs.forEach(bomb => bomb.render());\n    }\n}\n","import { createUser, INFECTED } from '.';\nimport { mapHeight, mapWidth, mapPaddingX, mapPaddingY } from '../config';\nimport { multiCollides } from '../utils';\nimport { allInfected } from './utils';\nimport { pubsub, GAME_OVER } from '../pubsub';\nimport { messageBox } from '../messageBox';\n\nexport default class {\n    constructor(map) {\n        this.map = map;\n        this.users = [];\n        this.gameOver = false;\n        for (let row = 1; row <= mapHeight + mapPaddingY * 2; row++) {\n            for (let col = 1; col <= mapWidth + mapPaddingX * 2; col++) {\n                const tile = map.tileAtLayer('main', { row, col });\n                if (tile >= 17 && tile <= 20) {\n                    this.users.push(createUser({ map, row: row - mapPaddingY + 1, col: col - mapPaddingX + 1 }));\n                }\n            }\n        }\n        pubsub.subscribe(GAME_OVER, () => (this.gameOver = true));\n    }\n    update() {\n        this.users.forEach(user => user.update());\n    }\n    render() {\n        this.users.forEach(user => user.render());\n    }\n    infect(viruses) {\n        const { users, gameOver } = this;\n        const userVirusCollisions = multiCollides(users, viruses).filter(([user]) => user.status !== INFECTED);\n        if (userVirusCollisions.length === 0) {\n            return;\n        }\n        userVirusCollisions.forEach(([user]) => user.infect());\n        if (gameOver) {\n            return;\n        }\n        if (allInfected(users)) {\n            messageBox.show('all users infected<br>game over');\n            pubsub.publish(GAME_OVER);\n            return;\n        }\n        messageBox.flash('user infected!');\n    }\n}\n","import { collides } from '.';\n\nexport default (arr1, arr2) => {\n    const collisions = [];\n    for (let i1 = 0; i1 < arr1.length; i1++) {\n        const sprite1 = arr1[i1];\n        for (let i2 = 0; i2 < arr2.length; i2++) {\n            const sprite2 = arr2[i2];\n            if (collides(sprite1, sprite2)) {\n                collisions.push([sprite1, sprite2]);\n            }\n        }\n    }\n    return collisions;\n};\n"],"sourceRoot":""}
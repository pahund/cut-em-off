{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/directions/constants.js","webpack:///./src/directions/directionIsAllowed.js","webpack:///./src/utils/degreesToRadians.js","webpack:///./src/utils/getRandomInt.js","webpack:///./src/utils/transformMapCoordinates.js","webpack:///./src/utils/collides.js","webpack:///./src/directions/switchDirection.js","webpack:///./src/directions/directionSwitchMap.js","webpack:///./src/directions/isIntersection.js","webpack:///./src/directions/getNextTile.js","webpack:///./src/directions/isValidTile.js","webpack:///./src/config.js","webpack:///./src/pubsub/pubsub.js","webpack:///./src/pubsub/constants.js","webpack:///./src/loop/createLoop.js","webpack:///./src/loop/utils/moveCamera.js","webpack:///./src/map/mapData.js","webpack:///./src/map/tilesheet/drawCurve.js","webpack:///./src/map/tilesheet/utils/krakel.js","webpack:///./src/map/tilesheet/drawStraight.js","webpack:///./src/map/tilesheet/drawTSection.js","webpack:///./src/map/tilesheet/drawCrossing.js","webpack:///./src/map/tilesheet/drawServer.js","webpack:///./src/map/tilesheet/drawTerminus.js","webpack:///./src/tileEngine/createTileEngine.js","webpack:///./src/tileEngine/utils/flatIndex.js","webpack:///./src/map/createMap.js","webpack:///./src/utils/calculateCameraCoordinates.js","webpack:///./src/map/utils/addPadding.js","webpack:///./src/map/tilesheet/createTilesheet.js","webpack:///./src/messageBox/messageBox.js","webpack:///./src/player/createPlayer.js","webpack:///./src/player/drawPlayer.js","webpack:///./src/utils/calculateRotation.js","webpack:///./src/player/updatePlayer.js","webpack:///./src/player/utils/getKey.js","webpack:///./src/player/utils/isInTheMiddle.js","webpack:///./src/utils/calculateRowAndCol.js","webpack:///./src/user/utils/allInfected.js","webpack:///./src/user/createUser.js","webpack:///./src/user/constants.js","webpack:///./src/user/drawUser.js","webpack:///./src/virus/createVirus.js","webpack:///./src/virus/updateVirus.js","webpack:///./src/virus/utils/moveVirus.js","webpack:///./src/virus/utils/isInTheMiddle.js","webpack:///./src/virus/utils/getBestDirections.js","webpack:///./src/directions/getOppositeDirection.js","webpack:///./src/virus/drawVirus.js","webpack:///./src/virus/createBlip.js","webpack:///./src/virus/drawBlip.js","webpack:///./src/virus/Blips.js","webpack:///./src/bomb/createBomb.js","webpack:///./src/bomb/constants.js","webpack:///./src/bomb/drawBomb.js","webpack:///./src/bomb/drawBombWithFuse.js","webpack:///./src/bomb/updateBomb.js","webpack:///./src/bomb/createShrapnel.js","webpack:///./src/bomb/drawShrapnel.js","webpack:///./src/audio2/sfxr.js","webpack:///./src/audio2/index.js","webpack:///./src/index.js","webpack:///./src/canvas/createCanvas.js","webpack:///./src/bomb/Bombs.js","webpack:///./src/user/Users.js","webpack:///./src/utils/multiCollides.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","N","E","S","W","directionIsAllowed","map","x","y","direction","tile","tileAtLayer","isValidTile","directionSwitchMap","allowed","includes","nextTile","getNextTile","degreesToRadians","degrees","Math","PI","getRandomInt","a","b","min","max","floor","random","transformMapCoordinates","row","col","tileWidth","tileHeight","sx","sy","undefined","config_canvasWidth","config_canvasHeight","collides","sprite1","sprite2","dx","dy","sqrt","collisionRadius","switchDirection","curr","Error","nextDirection","change","otherDirections","filter","dir","length","1","[object Object]","2","3","4","5","6","9","10","11","12","13","14","17","18","19","20","38","intersectionTiles","entries","push","Number","config_tileWidth","config_tileHeight","pubsub","this","subscribers","message","callback","incomingMessage","payload","forEach","DROP_BOMB","BOMB_EXPLODES","INFECTED","createLoop","player","virus","users","bombs","shipMoving","subscribe","kontra","gameLoop","update","infect","moveCamera","render","mapData","calculatePointOnArc","deg","cos","sin","drawCurve","ctx","broken","save","translate","rotate","lineWidth","strokeStyle","beginPath","moveTo","arc","lineTo","stroke","restore","krakel","data","draw","drawStraight","drawTSection","drawCrossing","drawServer","drawTerminus","createTileEngine","properties","width","height","mapWidth","mapHeight","context","canvasWidth","canvas","canvasHeight","offscreenCanvas","document","createElement","offscreenContext","getContext","sxMax","syMax","_sx","_sy","layerOrder","tileEngine","tilesets","layers","addTilesets","concat","tileset","tilesetImage","image","firstGrid","lastTileset","tiles","Infinity","path","lastIndexOf","substr","assets","images","numTiles","lastGrid","sort","addLayers","layer","Array","isArray","zIndex","prop","JSON","parse","e","layerIndex","dataIndex","len","renderTile","preRenderImage","layerId","flatIndex","layerCollidesWith","getRow","getCol","endRow","endCol","index","getIndex","position","drawImage","renderLayer","startX","startY","viewWidth","ceil","tileOffset","w","count","getTileset","_layerOrder","currTile","clear","clearRect","createMap","calculateCameraCoordinates","config_mapWidth","config_mapHeight","paddedMap","arr","h","retVal","idx","addPadding","Image","src","toDataURL","Promise","resolve","setTimeout","createTilesheet","fill","messageBox","timeoutHandler","div","style","cssText","getElementById","appendChild","clearTimeout","transition","innerHTML","backgroundColor","color","createPlayer","sprite","infected","gameOver","dropBomb","scale","dropping","bombCoolingDown","updatePlayer","drawPlayer","show","publish","calculateRotation","fillStyle","closePath","keys","pressed","getKey","isInTheMiddle","calculateRowAndCol","mapX","mapY","status","drawUser","spriteMapping","0","fg","bg","createVirus","blips","Blips","updateVirus","drawVirus","start","updateVirus_visits","moveVirus","utils_isInTheMiddle","isIntersection","bestDirections","viable","visits","minVis","MAX_SAFE_INTEGER","vis","getBestDirections","getOppositeDirection","createBlip","ttl","radius","drawBlip","setInterval","blip","createBomb","fuseLength","FUSE_BURNING","shrapnel","explosionDuration","updateBomb","drawBomb","drawBombWithFuse","fuseDeg","sparkCX","sparkCY","sparkX","sparkY","fillRect","createShrapnel","changeTile","speed","rotation","rotationDir","advance","drawShrapnel","synth","_envelopeLength0","_envelopeLength1","_envelopeLength2","_period","_maxPeriod","_slide","_deltaSlide","_changeAmount","_changeTime","_changeLimit","_squareDuty","_dutySweep","_params","setSettings","values","String","fromCharCode","totalTime","multiplier","reset","totalReset","synthWave","buffer","_filters","_hpFilterCutoff","_hpFilterDeltaCutoff","_lpFilterCutoff","_lpFilterDeltaCutoff","_lpFilterOn","_masterVolume","_minFreqency","_phaser","_phaserDeltaOffset","_phaserOffset","_repeatLimit","_sustainPunch","_vibratoAmplitude","_vibratoSpeed","_waveType","_envelopeLength","_envelopeOverLength0","_envelopeOverLength1","_envelopeOverLength2","_lpFilterDamping","_lpFilterOldPos","_periodTemp","_phaserInt","_pos","_sample","_superSample","_finished","_envelopeStage","_envelopeTime","_envelopeVolume","_hpFilterPos","_lpFilterDeltaPos","_lpFilterPos","_phase","_phaserPos","_repeatTime","_vibratoPhase","_phaserBuffer","_noiseBuffer","j","abs","sfxr","settings","envelopeFullLength","Uint8Array","used","Uint16Array","dv","Uint32Array","base64Characters","output","slice","ArcadeAudio","sounds","add","elem","tick","pool","audio","Audio","play","sound","soundData","aa","createCanvas","init","mapCoords","find","bomb","createUser","user","viruses","userVirusCollisions","arr1","arr2","collisions","i1","i2","multiCollides","every","state","allInfected","flash","loop"],"mappings":"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5CAM,EAAA,EAAiBlB,MAAA/E,MAAAC,MAAA+E,UAAA,MACjBD,EAAAE,OACAF,EAAAG,WAAAjF,EAAA,GAAA8C,IAAA,GAAA/C,EAAA,GAAAgD,IAAA,GACA+B,EAAAK,UAAA,EACAL,EAAAM,YVsBA,UUrBAN,EAAAO,YAEAM,EAAAb,EADAC,IAEA,WACA,WACA,WACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,YACA,YACA,YACA,YACA,YACA,YACA,UACA,WACA,WACA,aAIA,YACA,YACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,WAGAD,EAAAW,SACAX,EAAAY,WCrDAO,EAAA,EAAiBnB,MAAA/E,MAAAC,MAAA+E,aACjBD,EAAAE,OACAF,EAAAG,WAAAjF,EAAA,GAAA8C,IAAA,GAAA/C,EAAA,GAAAgD,IAAA,GACA+B,EAAAK,UAAA,EACAL,EAAAM,YXsBA,UWrBAN,EAAAO,YACAM,EAAAb,IACA,WACA,WACA,UACA,UACA,WACA,WACA,YACA,YACA,YAEAA,EAAAW,SACAV,IACAD,EAAAK,UAAA,EACAQ,EAAAb,IACA,WACA,UACA,WACA,WACA,WACA,WACA,YACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,SACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,YACA,UACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEAA,EAAAW,UAEAX,EAAAY,WCzEAQ,EAAA,EAAiBpB,MAAA/E,MAAAC,MAAA0E,MAAAK,UAAA,MACjBD,EAAAE,OACAF,EAAAG,WAAAjF,EAAA,GAAA8C,IAAA,GAAA/C,EAAA,GAAAgD,IAAA,GACA+B,EAAAI,OAAA/F,EAAAuF,IACAI,EAAAK,UAAA,EACAL,EAAAM,YZoBA,UYnBAN,EAAAO,YAEAM,EAAAb,EADAC,IACA,0EAEA,yCAEAD,EAAAW,SACAX,EAAAY,WCAAS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","file":"game.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const N = 'N';\nexport const E = 'E';\nexport const S = 'S';\nexport const W = 'W';\n","import { directionSwitchMap, getNextTile, isValidTile } from '.';\n\nexport default (map, { x, y }, direction) => {\n    const tile = map.tileAtLayer('main', { x, y });\n    if (!isValidTile(tile) || !directionSwitchMap[tile].allowed.includes(direction)) {\n        return false;\n    }\n    const nextTile = getNextTile(map, { x, y }, direction);\n    return isValidTile(nextTile);\n};\n","export default degrees => (degrees * Math.PI) / 180;\n","export default (a, b) => {\n    const min = Math.min(a, b);\n    const max = Math.max(a, b);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","import { canvasHeight, canvasWidth } from '../config';\n\n/**\n * Transforms coordinates relative to the map (either row/col or x/y)\n * to coordinates on the canvas.\n *\n * @param map The map to calculate the coordinates from\n * @param row The row on the map (use either this or y)\n * @param col The column on the map (use either this x)\n * @param x The X coordinate on the map (use either this or col)\n * @param y The Y coordinate on the map (use either this or row)\n * @return {{x: number, y: number}}\n */\nexport default (map, { row, col, x, y }) => {\n    const { tileWidth, tileHeight, sx, sy } = map;\n    const calcX = x !== undefined ? x : (col - 1) * tileWidth;\n    const calcY = y !== undefined ? y : (row - 1) * tileHeight;\n    const nextX = calcX - sx + canvasWidth / 2 + tileWidth / 2;\n    const nextY = calcY - sy + canvasHeight / 2 + tileHeight / 2;\n    return { x: nextX, y: nextY };\n};\n","export default (sprite1, sprite2) => {\n    const dx = sprite1.x - sprite2.x;\n    const dy = sprite1.y - sprite2.y;\n    return Math.sqrt(dx * dx + dy * dy) < sprite1.collisionRadius + sprite2.collisionRadius;\n};\n","import { directionSwitchMap, directionIsAllowed, isValidTile } from '.';\nimport { getRandomInt } from '../utils';\n\nexport default (map, { x, y }, curr) => {\n    const tile = map.tileAtLayer('main', { x, y });\n    /* player accidentally stepped onto a broken conduit tile */\n    if (!isValidTile(tile)) {\n        throw new Error('dropped');\n    }\n    const nextDirection = directionSwitchMap[tile].change[curr] || curr;\n    if (directionIsAllowed(map, { x, y }, nextDirection)) {\n        return nextDirection;\n    }\n    const otherDirections = directionSwitchMap[tile].allowed.filter(dir => directionIsAllowed(map, { x, y }, dir));\n    switch (otherDirections.length) {\n        case 0:\n            /* oh no, player locked themselves in! */\n            throw new Error('locked in');\n        case 1:\n            return otherDirections[0];\n        default:\n            return otherDirections[getRandomInt(0, otherDirections.length - 1)];\n    }\n};\n","import { N, E, S, W } from '.';\n\nexport default {\n    // curve from S to E\n    1: {\n        allowed: [S, E],\n        change: {\n            [N]: E,\n            [W]: S\n        }\n    },\n    // curve from W to S\n    2: {\n        allowed: [W, S],\n        change: {\n            [N]: W,\n            [E]: S\n        }\n    },\n    // straight from N to S\n    3: {\n        allowed: [N, S],\n        change: {}\n    },\n    // T section W, N, E\n    4: {\n        allowed: [W, N, E],\n        change: {\n            [S]: N\n        }\n    },\n    // T section N, E, S\n    5: {\n        allowed: [N, E, S],\n        change: {\n            [W]: E\n        }\n    },\n    // T section W, E, S\n    6: {\n        allowed: [W, E, S],\n        change: {\n            [N]: S\n        }\n    },\n    // curve from N to E\n    9: {\n        allowed: [N, E],\n        change: {\n            [S]: E,\n            [W]: N\n        }\n    },\n    // curve from W to N\n    10: {\n        allowed: [W, N],\n        change: {\n            [E]: N,\n            [S]: W\n        }\n    },\n    // straight from W to E\n    11: {\n        allowed: [W, E],\n        change: {}\n    },\n    // crossing\n    12: {\n        allowed: [N, E, S, W],\n        change: {}\n    },\n    // T section N, S, W\n    13: {\n        allowed: [N, S, W],\n        change: {\n            [E]: W\n        }\n    },\n    // server\n    14: {\n        allowed: [N, S],\n        change: {}\n    },\n    // terminus S\n    17: {\n        allowed: [S],\n        change: {\n            [N]: S\n        }\n    },\n    // terminus W\n    18: {\n        allowed: [W],\n        change: {\n            [E]: W\n        }\n    },\n    // terminus N\n    19: {\n        allowed: [N],\n        change: {\n            [S]: N\n        }\n    },\n    // terminus E\n    20: {\n        allowed: [E],\n        change: {\n            [W]: E\n        }\n    },\n    // broken server\n    38: {\n        allowed: [N, S],\n        change: {}\n    }\n};\n","import { directionSwitchMap } from './index';\n\nconst intersectionTiles = [];\nfor (const [tile, { allowed }] of Object.entries(directionSwitchMap)) {\n    if (allowed.length > 2) {\n        intersectionTiles.push(Number(tile));\n    }\n}\n\nexport default tile => intersectionTiles.includes(tile);\n","import { N, E, S, W } from '.';\nimport { tileHeight, tileWidth } from '../config';\n\nexport default (map, { x, y }, direction) =>\n    map.tileAtLayer('main', {\n        x: direction === E ? x + tileWidth : direction === W ? x - tileWidth : x,\n        y: direction === N ? y - tileHeight : direction === S ? y + tileHeight : y\n    });\n","export default tile => tile < 25 || (tile > 30 && tile < 33) || (tile > 37 && tile < 41) || tile > 44;\n","import { N, W } from './directions';\n\nexport const canvasWidth = 800;\nexport const canvasHeight = 600;\n\n/* map */\nexport const tileWidth = 100;\nexport const tileHeight = 100;\nexport const mapWidth = 20;\nexport const mapHeight = 20;\nexport const mapPaddingX = 4;\nexport const mapPaddingY = 3;\n\n/* player */\nexport const playerStartCol = 5;\nexport const playerStartRow = 6;\nexport const playerStartDirection = N;\nexport const playerSpeed = 5;\n\n/* virus */\nexport const virusStartCol = 5;\nexport const virusStartRow = 4;\nexport const virusStartDirection = W;\nexport const virusSpeed = 2.5;\nexport const virusBlipInterval = 1000;\nexport const virusBlipTtl = 180;\n\n/* colors */\nexport const lightGreen = '#75a042';\nexport const darkGreen = '#365b1d';\nexport const lightBlue = '#52638a';\nexport const darkBlue = '#2b3653';\nexport const lightRed = '#cd3926';\nexport const darkRed = '#7a2431';\n\nexport const collisionRadius = 30;\nexport const bombCooldown = 100;\n","// exported for testing\nexport class Pubsub {\n    constructor() {\n        this.subscribers = [];\n    }\n    subscribe(message, callback) {\n        this.subscribers.push({ message, callback });\n    }\n    publish(incomingMessage, payload) {\n        this.subscribers.forEach(({ message, callback }) => message === incomingMessage && callback(payload));\n    }\n}\n\nexport default new Pubsub();\n","export const GAME_OVER = 0;\nexport const DROP_BOMB = 1;\nexport const BOMB_EXPLODES = 6;\nexport const INFECTED = 7;\nexport const DROP_SHIP = 2;\n","/* global kontra */\n\nimport { moveCamera } from './utils';\nimport { calculateRowAndCol } from '../utils';\nimport { pubsub, DROP_SHIP } from '../pubsub';\n\nexport default ({ map, player, virus, users, bombs }) => {\n    const times = [];\n    let fps;\n    let shipMoving = true;\n    pubsub.subscribe(DROP_SHIP, () => (shipMoving = false));\n\n    return kontra.gameLoop({\n        update() {\n            virus.update();\n            player.update();\n            player.infect(virus);\n            if (shipMoving) {\n                moveCamera(map, player.direction);\n            }\n            users.update();\n            users.infect([virus]);\n            bombs.update();\n        },\n        render() {\n            map.render();\n            users.render();\n            bombs.render();\n            player.render();\n            virus.render();\n            if (process.env.NODE_ENV === 'development') {\n                const now = performance.now();\n                while (times.length > 0 && times[0] <= now - 1000) {\n                    times.shift();\n                }\n                times.push(now);\n                fps = times.length;\n                const { row, col } = calculateRowAndCol(map);\n\n                // eslint-disable-next-line no-param-reassign\n                window.devbox.innerHTML = `${fps} fps – sx=${map.sx}, sy=${map.sy}, row=${row}, col=${col}`;\n            }\n        }\n    });\n};\n","import { playerSpeed } from '../../config';\nimport { N, E, S, W } from '../../directions';\n\nexport default (map, direction) => {\n    switch (direction) {\n        case N:\n            // eslint-disable-next-line no-param-reassign\n            map.sy -= playerSpeed;\n            break;\n        case E:\n            // eslint-disable-next-line no-param-reassign\n            map.sx += playerSpeed;\n            break;\n        case S:\n            // eslint-disable-next-line no-param-reassign\n            map.sy += playerSpeed;\n            break;\n        case W:\n            // eslint-disable-next-line no-param-reassign\n            map.sx -= playerSpeed;\n            break;\n        default:\n    }\n};\n","// prettier-ignore\nexport default [\n    0, 17,  0,  0,  0, 17,  0,  0,  0, 17,  0,  0,  0, 17,  0,  0,  0, 17,  0,  0,\n   20,  4, 11,  2,  1,  4,  2,  0,  0,  5, 11,  6, 11, 13,  0,  1, 11, 12,  2,  0,\n    0,  1, 11, 10,  9, 11, 13,  0,  0,  3,  0,  3,  0,  5, 11, 13,  0,  3,  3,  0,\n    0,  3,  1, 11,  6, 11, 10,  0,  1,  4,  2,  9, 11, 13,  0,  9, 11, 10,  3,  0,\n    0,  3,  3,  0,  3,  0,  0,  0,  3,  1, 13,  0,  0,  3,  0,  0,  0,  0,  5, 18,\n    0,  3,  3,  0, 14,  0,  1, 11, 10,  3,  9, 11,  6,  4, 11,  6,  2,  0,  3,  0,\n    0,  3,  3,  0,  3,  0,  3,  0,  0,  3,  0,  0,  3,  0,  0,  3,  3,  0,  3,  0,\n    0,  9, 13,  0,  5, 11, 10,  0,  0,  3,  1, 11, 10,  0,  0,  3,  3,  0,  3,  0,\n    0,  0,  3,  0,  3,  0,  0,  0,  1,  4, 10,  0,  0,  0,  0,  3,  5, 11,  4, 18,\n    0,  1, 13,  0,  5, 11,  2,  0,  3,  0,  1, 11, 11, 11, 11, 12, 10,  0,  0,  0,\n    0,  3,  3,  0,  3,  0,  5, 11, 13,  0,  9, 11,  2,  0,  0,  3,  0,  0,  1, 18,\n    0,  9, 10,  0,  5, 11, 10,  0,  9, 11, 11, 11, 12, 11,  6, 10,  0,  0,  3,  0,\n    0,  0,  0,  0,  3,  1, 11,  2,  1, 11, 11, 11, 10,  0,  3,  0,  1, 11,  4, 18,\n   20,  6,  6, 11, 10,  3,  0,  3,  3,  0,  0,  0,  1,  2,  9, 11, 12, 11,  2,  0,\n    0,  3,  3,  0,  0,  3,  0,  3,  3,  1, 11,  2,  3,  3,  0,  0,  3,  0,  3,  0,\n    0,  5,  4,  2,  0,  5, 11, 10,  3,  3,  0,  5, 12,  4, 11, 11, 13,  0,  5, 18,\n    0,  3,  0,  5, 11, 12, 11,  6, 10,  9,  6, 10,  3,  0,  0,  0,  9, 11, 10,  0,\n   20,  4, 11, 13,  0,  3,  0,  9, 11, 11, 13,  0,  9, 11,  6, 11,  6,  6, 11, 18,\n    0,  0,  0,  3,  0,  3,  0,  0,  0,  0,  5, 11, 11,  2,  3,  0,  3,  3,  0,  0,\n    0,  0,  0, 19,  0, 19,  0,  0,  0,  0, 19,  0,  0, 19,  9, 11, 10, 19,  0,  0\n];\n","/* eslint-disable no-param-reassign */\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { tileHeight, tileWidth, lightBlue } from '../../config';\n\nfunction calculatePointOnArc(deg, r) {\n    return [Math.cos(deg2rad(deg)) * r + 50, Math.sin(deg2rad(deg)) * r + 50];\n}\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        ctx.moveTo(20, 50);\n        ctx.arc(50, 50, 30, deg2rad(180), deg2rad(190));\n        ctx.moveTo(...calculatePointOnArc(190, 30));\n        ctx.lineTo(10, 45);\n        ctx.lineTo(10, 35);\n        ctx.lineTo(-10, 40);\n        ctx.lineTo(...calculatePointOnArc(190, 70));\n        ctx.arc(50, 50, 70, deg2rad(190), deg2rad(180), true);\n        ctx.moveTo(50, 20);\n        ctx.arc(50, 50, 30, deg2rad(270), deg2rad(260), true);\n        ctx.moveTo(...calculatePointOnArc(260, 30));\n        ctx.lineTo(40, 10);\n        ctx.lineTo(45, 0);\n        ctx.lineTo(35, 0);\n        ctx.lineTo(...calculatePointOnArc(260, 70));\n        ctx.arc(50, 50, 70, deg2rad(260), deg2rad(270));\n    } else {\n        ctx.moveTo(20, 50);\n        ctx.arc(50, 50, 30, deg2rad(180), deg2rad(270));\n        ctx.moveTo(-20, 50);\n        ctx.arc(50, 50, 70, deg2rad(180), deg2rad(270));\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* creates canvas moveTo and lineTo commands from arrays; doing this mostly to save a couple of bytes */\nexport default (ctx, data) => data.forEach(([draw, x, y]) => ctx[draw ? 'lineTo' : 'moveTo'](x, y));\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [\n            [0, -20, 50],\n            [1, -20, 30],\n            [1, -10, 40],\n            [1, 0, 25],\n            [1, 10, 35],\n            [1, 20, 30],\n            [1, 20, 50],\n            [0, -20, -50],\n            [1, -20, -40],\n            [1, -10, -25],\n            [1, 0, -35],\n            [1, 10, -30],\n            [1, 20, -40],\n            [1, 20, -50]\n        ]);\n    } else {\n        krakel(ctx, [[0, -20, -50], [1, -20, 50], [0, 20, -50], [1, 20, 50]]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [\n            [0, 50, 20],\n            [1, 40, 20],\n            [1, 45, 10],\n            [1, 40, -10],\n            [1, 45, -20],\n            [1, 50, -20],\n            [0, 20, -50],\n            [1, 20, -35],\n            [1, 10, -40],\n            [1, 0, -30],\n            [1, -10, -40],\n            [1, -20, -35],\n            [1, -20, -50],\n            [0, -50, -20],\n            [1, -40, -20],\n            [1, -35, -10],\n            [1, -45, 0],\n            [1, -30, 10],\n            [1, -35, 20],\n            [1, -50, 20]\n        ]);\n    } else {\n        krakel(ctx, [\n            [0, -20, -50],\n            [1, -20, -20],\n            [1, -50, -20],\n            [0, 20, -50],\n            [1, 20, -20],\n            [1, 50, -20],\n            [0, -50, 20],\n            [1, 50, 20]\n        ]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [\n            [0, -20, 50],\n            [1, -20, 45],\n            [1, -10, 40],\n            [1, 0, 45],\n            [1, 10, 35],\n            [1, 20, 40],\n            [1, 20, 50],\n            [0, 50, 20],\n            [1, 40, 20],\n            [1, 45, 10],\n            [1, 40, -10],\n            [1, 45, -20],\n            [1, 50, -20],\n            [0, 20, -50],\n            [1, 20, -35],\n            [1, 10, -40],\n            [1, 0, -30],\n            [1, -10, -40],\n            [1, -20, -35],\n            [1, -20, -50],\n            [0, -50, -20],\n            [1, -40, -20],\n            [1, -35, -10],\n            [1, -45, 0],\n            [1, -30, 10],\n            [1, -35, 20],\n            [1, -50, 20]\n        ]);\n    } else {\n        krakel(ctx, [\n            [0, -20, -50],\n            [1, -20, -20],\n            [1, -50, -20],\n            [0, 20, -50],\n            [1, 20, -20],\n            [1, 50, -20],\n            [0, -50, 20],\n            [1, -20, 20],\n            [1, -20, 50],\n            [0, 50, 20],\n            [1, 20, 20],\n            [1, 20, 50]\n        ]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, broken }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    krakel(ctx, [\n        [0, 30, -48],\n        [1, 48, -30],\n        [1, 48, 30],\n        [1, 30, 48],\n        [1, -30, 48],\n        [1, -48, 30],\n        [1, -48, -30],\n        [1, -30, -48],\n        [1, 30, -48]\n    ]);\n    ctx.stroke();\n    if (broken) {\n        ctx.lineWidth = 2;\n        krakel(ctx, [\n            [0, 10, -48],\n            [1, 0, -40],\n            [0, 24, -48],\n            [1, 20, -30],\n            [0, 48, -27],\n            [1, 20, -20],\n            [0, -10, -30],\n            [1, 10, -30],\n            [1, 30, -10],\n            [1, 20, 0],\n            [1, 10, 0],\n            [0, 48, 7],\n            [1, 30, 10],\n            [0, 20, 0],\n            [1, 30, 10],\n            [1, 10, 20],\n            [0, 30, 48],\n            [1, 30, 30],\n            [1, 10, 30],\n            [0, 20, 20],\n            [1, 20, 30],\n            [0, -10, 48],\n            [1, -10, 20],\n            [1, 0, 10],\n            [0, -20, 0],\n            [1, -20, 20],\n            [1, -10, 30],\n            [0, -30, 48],\n            [1, -20, 40],\n            [1, -20, 30],\n            [0, -30, 30],\n            [1, -20, 40],\n            [0, -48, 20],\n            [1, -30, 20],\n            [0, -40, 20],\n            [1, -40, 10],\n            [0, -48, 0],\n            [1, -30, 0],\n            [1, -20, -10],\n            [0, -40, 0],\n            [1, -30, 10],\n            [0, -48, -17],\n            [1, -40, -30],\n            [1, -30, -20],\n            [0, -30, -48],\n            [1, -10, -20],\n            [1, -10, -10],\n            [0, -20, -30],\n            [1, -20, -20],\n            [1, -30, -10]\n        ]);\n        ctx.stroke();\n    }\n    ctx.restore();\n};\n","/* eslint-disable no-param-reassign */\nimport { tileWidth, tileHeight, lightBlue } from '../../config';\nimport { degreesToRadians as deg2rad } from '../../utils';\nimport { krakel } from './utils';\n\nexport default ({ ctx, row, col, deg, broken = false }) => {\n    ctx.save();\n    ctx.translate((col - 1) * tileWidth + tileWidth / 2, (row - 1) * tileHeight + tileHeight / 2);\n    ctx.rotate(deg2rad(deg));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.beginPath();\n    if (broken) {\n        krakel(ctx, [[0, -20, 50], [1, -20, 40], [1, -10, 45], [1, 0, 35], [1, 10, 45], [1, 20, 40], [1, 20, 50]]);\n    } else {\n        krakel(ctx, [[0, -20, 50], [1, -20, 0], [1, 20, 0], [1, 20, 50]]);\n    }\n    ctx.stroke();\n    ctx.restore();\n};\n","/* global kontra */\nimport { flatIndex } from './utils';\n\n/**\n * A tile engine for rendering tilesets. Works well with the tile engine program Tiled.\n * @memberof kontra\n *\n * @param {object} properties - Properties of the tile engine.\n * @param {number} [properties.tileWidth=32] - Width of a tile.\n * @param {number} [properties.tileHeight=32] - Height of a tile.\n * @param {number} properties.width - Width of the map (in tiles).\n * @param {number} properties.height - Height of the map (in tiles).\n * @param {number} [properties.x=0] - X position to draw.\n * @param {number} [properties.y=0] - Y position to draw.\n * @param {number} [properties.sx=0] - X position to clip the tileset.\n * @param {number} [properties.sy=0] - Y position to clip the tileset.\n * @param {Context} [properties.context=kontra.context] - Provide a context for the tile engine to draw on.\n */\nexport default (properties = {}) => {\n    // size of the map (in tiles)\n    // @if DEBUG\n    if (!properties.width || !properties.height) {\n        throw Error('You must provide width and height properties');\n    }\n    // @endif\n    const width = properties.width;\n    const height = properties.height;\n\n    // size of the tiles. Most common tile size on opengameart.org seems to be 32x32,\n    // followed by 16x16\n    // Tiled names the property tilewidth and tileheight\n    const tileWidth = properties.tileWidth || 32;\n    const tileHeight = properties.tileHeight || 32;\n\n    const mapWidth = width * tileWidth;\n    const mapHeight = height * tileHeight;\n\n    const context = properties.context || kontra.context;\n    const canvasWidth = context.canvas.width;\n    const canvasHeight = context.canvas.height;\n\n    // create an off-screen canvas for pre-rendering the map\n    // @see http://jsperf.com/render-vs-prerender\n    const offscreenCanvas = document.createElement('canvas');\n    const offscreenContext = offscreenCanvas.getContext('2d');\n\n    // when clipping an image, sx and sy must within the image region, otherwise\n    // Firefox and Safari won't draw it.\n    // @see http://stackoverflow.com/questions/19338032/canvas-indexsizeerror-index-or-size-is-negative-or-greater-than-the-allowed-a\n    const sxMax = Math.max(0, mapWidth - canvasWidth);\n    const syMax = Math.max(0, mapHeight - canvasHeight);\n\n    let _sx, _sy;\n\n    // draw order of layers (by name)\n    const layerOrder = [];\n\n    const tileEngine = {\n        width,\n        height,\n\n        tileWidth,\n        tileHeight,\n\n        mapWidth,\n        mapHeight,\n\n        context,\n\n        x: properties.x || 0,\n        y: properties.y || 0,\n\n        tilesets: [],\n        layers: {},\n\n        /**\n         * Add an tileset for the tile engine to use.\n         * @memberof kontra.tileEngine\n         */\n        addTilesets: function addTilesets(tilesets) {\n            [].concat(tilesets).forEach(tileset => {\n                const tilesetImage = tileset.image;\n                let image, firstGrid, lastTileset, tiles;\n\n                // @see https://github.com/jed/140bytes/wiki/Byte-saving-techniques#coercion-to-test-for-types\n                if (`${tilesetImage}` === tilesetImage) {\n                    let i = Infinity;\n\n                    while (i >= 0) {\n                        i = tilesetImage.lastIndexOf('/', i);\n                        const path = i < 0 ? tilesetImage : tilesetImage.substr(i);\n\n                        if (kontra.assets.images[path]) {\n                            image = kontra.assets.images[path];\n                            break;\n                        }\n\n                        i--;\n                    }\n                } else {\n                    image = tilesetImage;\n                }\n\n                firstGrid = tileset.firstGrid;\n\n                // if the width or height of the provided image is smaller than the tile size,\n                // default calculation to 1\n                const numTiles = ((image.width / tileWidth) | 0 || 1) * ((image.height / tileHeight) | 0 || 1);\n\n                if (!firstGrid) {\n                    // only calculate the first grid if the tile map has a tileset already\n                    if (tileEngine.tilesets.length > 0) {\n                        lastTileset = tileEngine.tilesets[tileEngine.tilesets.length - 1];\n                        tiles =\n                            ((lastTileset.image.width / tileWidth) | 0) * ((lastTileset.image.height / tileHeight) | 0);\n\n                        firstGrid = lastTileset.firstGrid + tiles;\n                    }\n                    // otherwise this is the first tile added to the tile map\n                    else {\n                        firstGrid = 1;\n                    }\n                }\n\n                tileEngine.tilesets.push({\n                    firstGrid,\n                    lastGrid: firstGrid + numTiles - 1,\n                    image\n                });\n\n                // sort the tile map so we can perform a binary search when drawing\n                tileEngine.tilesets.sort((a, b) => a.firstGrid - b.firstGrid);\n            });\n        },\n\n        /**\n         * Add a layer to the tile engine.\n         * @memberof kontra.tileEngine\n         */\n        addLayers: function addLayers(layers) {\n            [].concat(layers).forEach(layer => {\n                // eslint-disable-next-line no-param-reassign\n                layer.render = layer.render === undefined ? true : layer.render;\n\n                let data, row, c, value;\n\n                // flatten a 2D array into a single array\n                if (Array.isArray(layer.data[0])) {\n                    data = [];\n\n                    // eslint-disable-next-line no-cond-assign\n                    for (let r = 0; (row = layer.data[r]); r++) {\n                        for (c = 0; c < width; c++) {\n                            data.push(row[c] || 0);\n                        }\n                    }\n                } else {\n                    data = layer.data;\n                }\n\n                tileEngine.layers[layer.name] = {\n                    data,\n                    zIndex: layer.zIndex || 0,\n                    render: layer.render\n                };\n\n                // merge properties of layer onto layer object\n                for (const prop in layer.properties) {\n                    if (layer.properties.hasOwnProperty(prop)) {\n                        value = layer.properties[prop];\n\n                        try {\n                            value = JSON.parse(value);\n                        } catch (e) {\n                            /* intentionally empty */\n                        }\n\n                        tileEngine.layers[layer.name][prop] = value;\n                    }\n                }\n\n                // only add the layer to the layer order if it should be drawn\n                if (tileEngine.layers[layer.name].render) {\n                    layerOrder.push(layer.name);\n\n                    layerOrder.sort((a, b) => tileEngine.layers[a].zIndex - tileEngine.layers[b].zIndex);\n                }\n            });\n\n            preRenderImage();\n        },\n\n        changeTile(layerId, { row, col }, tile) {\n            const dataIndex = flatIndex(row, col, width);\n            const layer = tileEngine.layers[layerId];\n            layer.data[dataIndex] = tile;\n            renderTile(layer, dataIndex, true);\n        },\n\n        /**\n         * Simple bounding box collision test for layer tiles.\n         * @memberof kontra.tileEngine\n         *\n         * @param {string} name - Name of the layer.\n         * @param {object} object - Object to check collision against.\n         * @param {number} object.x - X coordinate of the object.\n         * @param {number} object.y - Y coordinate of the object.\n         * @param {number} object.width - Width of the object.\n         * @param {number} object.height - Height of the object.\n         *\n         * @returns {boolean} True if the object collides with a tile, false otherwise.\n         */\n        layerCollidesWith: function layerCollidesWith(name, object) {\n            // calculate all tiles that the object can collide with\n            const row = tileEngine.getRow(object.y);\n            const col = tileEngine.getCol(object.x);\n\n            const endRow = tileEngine.getRow(object.y + object.height);\n            const endCol = tileEngine.getCol(object.x + object.width);\n\n            // check all tiles\n            let index;\n            for (let r = row; r <= endRow; r++) {\n                for (let c = col; c <= endCol; c++) {\n                    index = getIndex({ row: r, col: c });\n\n                    if (tileEngine.layers[name].data[index]) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Get the tile from the specified layer at x, y or row, col.\n         * @memberof kontra.tileEngine\n         *\n         * @param {string} name - Name of the layer.\n         * @param {object} position - Position of the tile in either x, y or row, col.\n         * @param {number} position.x - X coordinate of the tile.\n         * @param {number} position.y - Y coordinate of the tile.\n         * @param {number} position.row - Row of the tile.\n         * @param {number} position.col - Col of the tile.\n         *\n         * @returns {number}\n         */\n        tileAtLayer(name, position) {\n            const index = getIndex(position);\n\n            if (index >= 0) {\n                return tileEngine.layers[name].data[index];\n            }\n            return undefined;\n        },\n\n        /**\n         * Render the pre-rendered canvas.\n         * @memberof kontra.tileEngine\n         */\n        render() {\n            tileEngine.context.drawImage(\n                offscreenCanvas,\n                tileEngine.sx,\n                tileEngine.sy,\n                canvasWidth,\n                canvasHeight,\n                tileEngine.x,\n                tileEngine.y,\n                canvasWidth,\n                canvasHeight\n            );\n        },\n\n        /**\n         * Render a specific layer.\n         * @memberof kontra.tileEngine\n         *\n         * @param {string} name - Name of the layer to render.\n         */\n        renderLayer: function renderLayer(name) {\n            const layer = tileEngine.layers[name];\n\n            // calculate the starting tile\n            let row = tileEngine.getRow();\n            const col = tileEngine.getCol();\n            let index = getIndex({ row, col });\n\n            // calculate where to start drawing the tile relative to the drawing canvas\n            const startX = col * tileWidth - tileEngine.sx;\n            const startY = row * tileHeight - tileEngine.sy;\n\n            // calculate how many tiles the drawing canvas can hold\n            const viewWidth = Math.min(Math.ceil(canvasWidth / tileWidth) + 1, width);\n            const viewHeight = Math.min(Math.ceil(canvasHeight / tileHeight) + 1, height);\n            const numTiles = viewWidth * viewHeight;\n\n            let count = 0;\n            let x, y, tile, tileset, image, tileOffset, w, sx, sy;\n\n            // draw just enough of the layer to fit inside the drawing canvas\n            while (count < numTiles) {\n                tile = layer.data[index];\n\n                if (tile) {\n                    tileset = getTileset(tile);\n                    image = tileset.image;\n\n                    x = startX + (count % viewWidth) * tileWidth;\n                    y = startY + ((count / viewWidth) | 0) * tileHeight;\n\n                    tileOffset = tile - tileset.firstGrid;\n                    w = image.width / tileWidth;\n\n                    sx = (tileOffset % w) * tileWidth;\n                    sy = ((tileOffset / w) | 0) * tileHeight;\n\n                    tileEngine.context.drawImage(image, sx, sy, tileWidth, tileHeight, x, y, tileWidth, tileHeight);\n                }\n\n                if (++count % viewWidth === 0) {\n                    index = col + ++row * width;\n                } else {\n                    index++;\n                }\n            }\n        },\n\n        /**\n         * Get the row from the y coordinate.\n         * @memberof kontra.tileEngine\n         *\n         * @param {number} y - Y coordinate.\n         *\n         * @return {number}\n         */\n        getRow(y) {\n            // eslint-disable-next-line no-param-reassign\n            y = y || 0;\n\n            return ((tileEngine.sy + y) / tileHeight) | 0;\n        },\n\n        /**\n         * Get the col from the x coordinate.\n         * @memberof kontra.tileEngine\n         *\n         * @param {number} x - X coordinate.\n         *\n         * @return {number}\n         */\n        getCol(x) {\n            // eslint-disable-next-line no-param-reassign\n            x = x || 0;\n\n            return ((tileEngine.sx + x) / tileWidth) | 0;\n        },\n\n        get sx() {\n            return _sx;\n        },\n\n        get sy() {\n            return _sy;\n        },\n\n        // ensure sx and sy are within the image region\n        set sx(value) {\n            _sx = Math.min(Math.max(0, value), sxMax);\n        },\n\n        set sy(value) {\n            _sy = Math.min(Math.max(0, value), syMax);\n        },\n\n        // expose properties for testing\n        // @if DEBUG\n        _layerOrder: layerOrder\n        // @endif\n    };\n\n    // set here so we use setter function\n    tileEngine.sx = properties.sx || 0;\n    tileEngine.sy = properties.sy || 0;\n\n    // make the off-screen canvas the full size of the map\n    offscreenCanvas.width = mapWidth;\n    offscreenCanvas.height = mapHeight;\n\n    // merge properties of the tile engine onto the tile engine itself\n    for (const prop in properties.properties) {\n        if (properties.properties.hasOwnProperty(prop)) {\n            let value = properties.properties[prop];\n\n            try {\n                value = JSON.parse(value);\n            } catch (e) {\n                /* intentionally empty */\n            }\n\n            // passed in properties override properties.properties\n            tileEngine[prop] = tileEngine[prop] || value;\n        }\n    }\n\n    if (properties.tilesets) {\n        tileEngine.addTilesets(properties.tilesets);\n    }\n\n    if (properties.layers) {\n        tileEngine.addLayers(properties.layers);\n    }\n\n    /**\n     * Get the index of the x, y or row, col.\n     * @memberof kontra.tileEngine\n     * @private\n     *\n     * @param {number} position.x - X coordinate of the tile.\n     * @param {number} position.y - Y coordinate of the tile.\n     * @param {number} position.row - Row of the tile.\n     * @param {number} position.col - Col of the tile.\n     *\n     * @return {number} Returns the tile index or -1 if the x, y or row,\n     *         col is outside the dimensions of the tile engine.\n     */\n    function getIndex(position) {\n        let row, col;\n\n        if (typeof position.x !== 'undefined' && typeof position.y !== 'undefined') {\n            row = tileEngine.getRow(position.y);\n            col = tileEngine.getCol(position.x);\n        } else {\n            row = position.row;\n            col = position.col;\n        }\n\n        // don't calculate out of bound numbers\n        if (row < 0 || col < 0 || row >= height || col >= width) {\n            return -1;\n        }\n\n        return col + row * width;\n    }\n\n    /**\n     * Modified binary search that will return the tileset associated with the tile\n     * @memberof kontra.tileEngine\n     * @private\n     *\n     * @param {number} tile - Tile grid.\n     *\n     * @return {object}\n     */\n    function getTileset(tile) {\n        let min = 0;\n        let max = tileEngine.tilesets.length - 1;\n        let index, currTile;\n\n        while (min <= max) {\n            index = ((min + max) / 2) | 0;\n            currTile = tileEngine.tilesets[index];\n\n            if (tile >= currTile.firstGrid && tile <= currTile.lastGrid) {\n                return currTile;\n            } else if (currTile.lastGrid < tile) {\n                min = index + 1;\n            } else {\n                max = index - 1;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Pre-render the tiles to make drawing fast.\n     * @memberof kontra.tileEngine\n     * @private\n     */\n    function preRenderImage() {\n        // draw each layer in order\n        // eslint-disable-next-line no-cond-assign\n        for (let layerIndex = 0, layer; (layer = tileEngine.layers[layerOrder[layerIndex]]); layerIndex++) {\n            for (let dataIndex = 0, len = layer.data.length; dataIndex < len; dataIndex++) {\n                renderTile(layer, dataIndex);\n            }\n        }\n    }\n\n    function renderTile(layer, dataIndex, clear = false) {\n        const tile = layer.data[dataIndex];\n\n        // skip empty tiles (0)\n        if (!tile) {\n            return;\n        }\n\n        const tileset = getTileset(tile);\n        const image = tileset.image;\n\n        const x = (dataIndex % width) * tileWidth;\n        const y = ((dataIndex / width) | 0) * tileHeight;\n\n        const tileOffset = tile - tileset.firstGrid;\n        const w = image.width / tileWidth;\n\n        const sx = (tileOffset % w) * tileWidth;\n        const sy = ((tileOffset / w) | 0) * tileHeight;\n\n        if (clear) {\n            offscreenContext.clearRect(x, y, tileWidth, tileHeight);\n        }\n        offscreenContext.drawImage(image, sx, sy, tileWidth, tileHeight, x, y, tileWidth, tileHeight);\n    }\n\n    return tileEngine;\n};\n","export default (row, col, width) => (row - 1) * width + col - 1;\n","/* global kontra */\n\nimport {\n    tileHeight,\n    tileWidth,\n    mapHeight as height,\n    mapWidth as width,\n    mapPaddingX,\n    mapPaddingY,\n    playerStartCol,\n    playerStartRow\n} from '../config';\nimport { calculateCameraCoordinates } from '../utils';\nimport mapData from './mapData';\nimport { addPadding } from './utils';\nimport { createTilesheet } from './tilesheet';\nimport { createTileEngine } from '../tileEngine';\n\nexport default async () => {\n    const { sx, sy } = calculateCameraCoordinates({ col: playerStartCol, row: playerStartRow });\n    const map = createTileEngine({\n        // tile size\n        tileWidth,\n        tileHeight,\n\n        // map size in tiles\n        width: width + mapPaddingX * 2,\n        height: height + mapPaddingY * 2,\n\n        sx,\n        sy\n    });\n\n    const paddedMap = addPadding(mapData, width, height, mapPaddingX, mapPaddingY);\n    const image = await createTilesheet();\n    map.addTilesets({ image });\n    // map.addTilesets({ image: kontra.assets.images.tilesheet });\n    map.addLayers([\n        {\n            name: 'main',\n            data: paddedMap\n        },\n        {\n            name: 'debug',\n            data: new Array(paddedMap.length).fill(0)\n        }\n        // {\n        //     name: 'grid',\n        //     data: new Array(paddedMap.length).fill(8)\n        // }\n    ]);\n    return map;\n};\n","import { tileHeight, tileWidth } from '../config';\n\nexport default ({ col, row }) => ({\n    sx: (col - 1) * tileWidth + tileWidth / 2,\n    sy: (row - 1) * tileHeight + tileHeight / 2\n});\n","export default (arr, w, h, x, y) => {\n    const retVal = [];\n    let idx = 0;\n    for (let row = 0; row < h + y * 2; row++) {\n        for (let col = 0; col < w + x * 2; col++) {\n            if (row < y || row >= y + h || col < x || col >= x + w) {\n                retVal.push(0);\n                continue;\n            }\n            retVal.push(arr[idx++]);\n        }\n    }\n    return retVal;\n};\n","import { tileHeight, tileWidth } from '../../config';\nimport { drawCurve, drawStraight, drawTSection, drawCrossing, drawServer, drawTerminus } from '.';\n\nexport default () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 8 * tileWidth;\n    canvas.height = 8 * tileHeight;\n    const ctx = canvas.getContext('2d');\n    drawCurve({ ctx, row: 1, col: 1, deg: 0 });\n    drawCurve({ ctx, row: 1, col: 2, deg: 90 });\n    drawCurve({ ctx, row: 2, col: 1, deg: 270 });\n    drawCurve({ ctx, row: 2, col: 2, deg: 180 });\n    drawStraight({ ctx, row: 1, col: 3, deg: 0 });\n    drawStraight({ ctx, row: 2, col: 3, deg: 90 });\n    drawTSection({ ctx, row: 1, col: 4, deg: 0 });\n    drawTSection({ ctx, row: 1, col: 5, deg: 90 });\n    drawTSection({ ctx, row: 1, col: 6, deg: 180 });\n    drawTSection({ ctx, row: 2, col: 5, deg: 270 });\n    drawCrossing({ ctx, row: 2, col: 4 });\n    drawTerminus({ ctx, row: 3, col: 1, deg: 0 });\n    drawTerminus({ ctx, row: 3, col: 2, deg: 90 });\n    drawTerminus({ ctx, row: 3, col: 3, deg: 180 });\n    drawTerminus({ ctx, row: 3, col: 4, deg: 270 });\n    drawServer({ ctx, row: 2, col: 6 });\n    drawCurve({ ctx, row: 4, col: 1, deg: 0, broken: true });\n    drawCurve({ ctx, row: 4, col: 2, deg: 90, broken: true });\n    drawCurve({ ctx, row: 5, col: 1, deg: 270, broken: true });\n    drawCurve({ ctx, row: 5, col: 2, deg: 180, broken: true });\n    drawStraight({ ctx, row: 4, col: 3, deg: 0, broken: true });\n    drawStraight({ ctx, row: 5, col: 3, deg: 90, broken: true });\n    drawTSection({ ctx, row: 4, col: 4, deg: 0, broken: true });\n    drawTSection({ ctx, row: 4, col: 5, deg: 90, broken: true });\n    drawTSection({ ctx, row: 4, col: 6, deg: 180, broken: true });\n    drawTSection({ ctx, row: 5, col: 5, deg: 270, broken: true });\n    drawCrossing({ ctx, row: 5, col: 4, broken: true });\n    drawTerminus({ ctx, row: 6, col: 1, deg: 0, broken: true });\n    drawTerminus({ ctx, row: 6, col: 2, deg: 90, broken: true });\n    drawTerminus({ ctx, row: 6, col: 3, deg: 180, broken: true });\n    drawTerminus({ ctx, row: 6, col: 4, deg: 270, broken: true });\n    drawServer({ ctx, row: 5, col: 6, broken: true });\n    if (process.env.NODE_ENV === 'development') {\n        require('./drawDebugGrid').default({ ctx, row: 1, col: 8 });\n    }\n    const image = new Image();\n    image.src = canvas.toDataURL('image/png');\n    // document.getElementById('wrapper').appendChild(image);\n    return new Promise(resolve => setTimeout(() => resolve(image), 100));\n};\n","class MessageBox {\n    constructor() {\n        this.timeoutHandler = null;\n        this.div = document.createElement('div');\n        this.div.style.cssText = `\nbackground-color: rgba(0,0,0,0);\nfont-size: 3em;\nfont-weight: bold;\nalign-items: center;\njustify-content: center;\ndisplay: flex;\ncolor: rgba(255,255,255,0);\nposition: absolute;\ntop: 0;\nleft:0;\nwidth: 100vw;\nheight: 100vh;\ntext-align: center;\npointer-events: none;\ntransition: background-color 3s ease-out, color 3s ease-out;\ntext-transform: uppercase;\nfont-family: monospace;\n    `;\n        const wrapper = document.getElementById('wrapper');\n        wrapper.appendChild(this.div);\n    }\n\n    show(message) {\n        clearTimeout(this.timeoutHandler);\n        this.div.style.transition = '3s';\n        this.div.innerHTML = `<div>${message}</div>`;\n        this.div.style.backgroundColor = 'rgba(0,0,0,0.5)';\n        this.div.style.color = 'rgba(255,255,255,1)';\n    }\n\n    flash(message) {\n        clearTimeout(this.timeoutHandler);\n        this.div.style.transition = '0.5s';\n        this.div.innerHTML = `<div>${message}</div>`;\n        this.div.style.color = 'rgba(255,255,255,1)';\n        this.timeoutHandler = setTimeout(() => (this.div.style.color = 'rgba(255,255,255,0)'), 500);\n    }\n}\nexport default new MessageBox();\n","/* global kontra */\n\nimport { drawPlayer, updatePlayer } from '.';\nimport { canvasHeight, canvasWidth, playerStartDirection, collisionRadius } from '../config';\nimport { pubsub, GAME_OVER, DROP_SHIP } from '../pubsub';\nimport { collides } from '../utils';\nimport { messageBox } from '../messageBox';\n\nexport default map => {\n    const player = kontra.sprite({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        collisionRadius,\n        map,\n        infected: false,\n        gameOver: false,\n        direction: playerStartDirection,\n        nextDirection: null,\n        dropBomb: false,\n        scale: 1,\n        dropping: false,\n        bombCoolingDown: false,\n\n        update() {\n            ({\n                nextDirection: this.nextDirection,\n                direction: this.direction,\n                dropBomb: this.dropBomb,\n                scale: this.scale,\n                bombCoolingDown: this.bombCoolingDown\n            } = updatePlayer(this, pubsub, messageBox));\n        },\n\n        render() {\n            drawPlayer(this);\n        },\n\n        infect(virus) {\n            if (collides(virus, this)) {\n                // eslint-disable-next-line no-param-reassign\n                this.infected = true;\n                if (!this.gameOver) {\n                    messageBox.show('player infected<br>game over');\n                    pubsub.publish(GAME_OVER);\n                }\n            }\n        }\n    });\n\n    pubsub.subscribe(GAME_OVER, () => (player.gameOver = true));\n    pubsub.subscribe(DROP_SHIP, () => (player.dropping = true));\n\n    return player;\n};\n","import { lightGreen, darkGreen, lightRed, darkRed } from '../config';\nimport { calculateRotation } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, direction, infected, scale } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.scale(scale, scale);\n    ctx.rotate(calculateRotation(direction));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = infected ? lightRed : lightGreen;\n    ctx.fillStyle = infected ? darkRed : darkGreen;\n    ctx.beginPath();\n    ctx.moveTo(-15, 25);\n    ctx.lineTo(0, -25);\n    ctx.lineTo(15, 25);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n};\n","import { degreesToRadians } from '.';\nimport { N, E, S, W } from '../directions';\n\nexport default direction => {\n    switch (direction) {\n        case N:\n            return degreesToRadians(0);\n        case E:\n            return degreesToRadians(90);\n        case S:\n            return degreesToRadians(180);\n        case W:\n            return degreesToRadians(270);\n        default:\n            return null;\n    }\n};\n","import { directionIsAllowed, switchDirection } from '../directions';\nimport { pubsub, DROP_BOMB, DROP_SHIP, GAME_OVER } from '../pubsub';\nimport { getKey, isInTheMiddle } from './utils';\nimport { calculateRowAndCol } from '../utils';\nimport { messageBox } from '../messageBox';\nimport { bombCooldown } from '../config';\n\nexport default sprite => {\n    let { nextDirection, direction, dropBomb, scale, bombCoolingDown } = sprite;\n    const { dropping } = sprite;\n    if (dropping) {\n        if (scale > 0) {\n            scale -= 0.01;\n        } else {\n            messageBox.show('You fell into the abyss<br>Game over');\n            pubsub.publish(GAME_OVER);\n        }\n        return { direction, nextDirection, dropBomb, scale, bombCoolingDown };\n    }\n    const { map, x, y, gameOver } = sprite;\n    if (!gameOver) {\n        ({ nextDirection, dropBomb } = getKey(sprite));\n        if (bombCoolingDown) {\n            dropBomb = false;\n        }\n    }\n    if (!isInTheMiddle({ x: map.sx, y: map.sy })) {\n        return { direction, nextDirection, dropBomb, scale, bombCoolingDown };\n    }\n    if (nextDirection && directionIsAllowed(map, { x, y }, nextDirection)) {\n        direction = nextDirection;\n        nextDirection = null;\n    } else {\n        try {\n            direction = switchDirection(map, { x, y }, direction);\n        } catch ({ message }) {\n            if (message === 'dropped') {\n                pubsub.publish(DROP_SHIP);\n            }\n        }\n    }\n    if (dropBomb) {\n        pubsub.publish(DROP_BOMB, calculateRowAndCol(map));\n        dropBomb = false;\n        bombCoolingDown = true;\n        setTimeout(() => {\n            // eslint-disable-next-line no-param-reassign\n            sprite.bombCoolingDown = false;\n        }, bombCooldown);\n    }\n    return { direction, nextDirection, dropBomb, scale, bombCoolingDown };\n};\n","/* global kontra */\n\nimport { N, E, S, W } from '../../directions';\n\nexport default sprite => {\n    let { nextDirection, dropBomb } = sprite;\n    if (kontra.keys.pressed('right')) {\n        nextDirection = E;\n    }\n    if (kontra.keys.pressed('left')) {\n        nextDirection = W;\n    }\n    if (kontra.keys.pressed('up')) {\n        nextDirection = N;\n    }\n    if (kontra.keys.pressed('down')) {\n        nextDirection = S;\n    }\n    if (kontra.keys.pressed('space')) {\n        dropBomb = true;\n    }\n    return { nextDirection, dropBomb };\n};\n","import { tileHeight, tileWidth } from '../../config';\n\nexport default ({ x, y }) => (x - tileWidth / 2) % tileWidth === 0 && (y - tileHeight / 2) % tileHeight === 0;\n","export default ({ sx, sy, tileWidth, tileHeight }) => ({\n    col: Math.floor(sx / tileWidth) + 1,\n    row: Math.floor(sy / tileHeight) + 1\n});\n","import { INFECTED } from '../constants';\n\nexport default users => users.every(user => user.state === INFECTED);\n","/* global kontra */\n\nimport { drawUser, INFECTED } from '.';\nimport { tileWidth, tileHeight, collisionRadius } from '../config';\nimport { pubsub, INFECTED as INFECTED_EVENT } from '../pubsub';\nimport { transformMapCoordinates } from '../utils';\nimport { ONLINE } from '.';\n\nexport default ({ map, row, col }) => {\n    const { x, y } = transformMapCoordinates(map, { row, col });\n    return kontra.sprite({\n        x,\n        y,\n        collisionRadius,\n        infected: false,\n        map,\n        mapX: (col - 1) * tileWidth,\n        mapY: (row - 1) * tileHeight,\n        status: ONLINE,\n        update() {\n            ({ x: this.x, y: this.y } = transformMapCoordinates(this.map, { x: this.mapX, y: this.mapY }));\n        },\n        render() {\n            drawUser(this);\n        },\n        infect() {\n            this.status = INFECTED;\n            pubsub.publish(INFECTED_EVENT);\n        }\n    });\n};\n","export const ONLINE = 0;\nexport const OFFLINE = 1;\nexport const INFECTED = 2;\n","/* global kontra */\nimport { lightBlue, darkBlue, lightGreen, darkGreen, lightRed, darkRed } from '../config';\nimport { ONLINE, OFFLINE, INFECTED } from './constants';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nconst spriteMapping = {\n    [ONLINE]: { fg: lightBlue, bg: darkBlue },\n    [OFFLINE]: { fg: lightGreen, bg: darkGreen },\n    [INFECTED]: { fg: lightRed, bg: darkRed }\n};\n\nexport default sprite => {\n    const { context: ctx, x, y, status } = sprite;\n    const { fg, bg } = spriteMapping[status];\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = fg;\n    ctx.fillStyle = bg;\n    ctx.beginPath();\n    ctx.moveTo(-40, 40);\n    ctx.lineTo(-40, 20);\n    ctx.arc(-20, 20, 20, deg2rad(180), deg2rad(270));\n    ctx.moveTo(-20, 0);\n    ctx.lineTo(20, 0);\n    ctx.arc(20, 20, 20, deg2rad(270), deg2rad(0));\n    ctx.lineTo(40, 40);\n    ctx.lineTo(-40, 40);\n    ctx.moveTo(-23, 20);\n    ctx.lineTo(-23, 40);\n    ctx.moveTo(23, 20);\n    ctx.lineTo(23, 40);\n    ctx.fill();\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(0, -15, 25, deg2rad(0), deg2rad(360));\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { virusStartDirection, virusStartCol, virusStartRow, tileWidth, tileHeight, collisionRadius } from '../config';\nimport { transformMapCoordinates } from '../utils';\nimport { drawVirus, updateVirus, Blips } from '.';\n\nexport default map => {\n    const { x, y } = transformMapCoordinates(map, { row: virusStartRow, col: virusStartCol });\n    const blips = new Blips();\n    const virus = kontra.sprite({\n        x,\n        y,\n        collisionRadius,\n        map,\n        mapX: (virusStartCol - 1) * tileWidth,\n        mapY: (virusStartRow - 1) * tileHeight,\n        direction: virusStartDirection,\n        blips,\n        update() {\n            ({ x: this.x, y: this.y, mapX: this.mapX, mapY: this.mapY, direction: this.direction } = updateVirus(this));\n            this.blips.update();\n        },\n        render() {\n            drawVirus(this);\n            this.blips.render();\n        }\n    });\n    blips.start(virus);\n\n    return virus;\n};\n","import {\n    switchDirection,\n    isIntersection,\n    directionSwitchMap,\n    getOppositeDirection,\n    directionIsAllowed\n} from '../directions';\nimport { transformMapCoordinates, getRandomInt } from '../utils';\nimport { isInTheMiddle, moveVirus, getBestDirection } from './utils';\nimport { mapWidth, mapHeight, tileWidth, tileHeight } from '../config';\n\nconst visits = Array(mapHeight)\n    .fill()\n    .map(() => Array(mapWidth).fill(0));\n\nexport default sprite => {\n    let { direction, x, y } = sprite;\n    const { map } = sprite;\n    const { mapX, mapY } = moveVirus(sprite);\n    if (isInTheMiddle({ mapX, mapY })) {\n        const tile = map.tileAtLayer('main', { x, y });\n        const col = mapX / tileWidth + 1;\n        const row = mapY / tileHeight + 1;\n        visits[row - 1][col - 1] = visits[row - 1][col - 1] + 1;\n        if (isIntersection(tile)) {\n            const { allowed } = directionSwitchMap[tile];\n            const viable = allowed.filter(\n                dir => dir !== getOppositeDirection(direction) && directionIsAllowed(map, { x, y }, dir)\n            );\n            const bestDirections = getBestDirection({ viable, visits, row, col });\n            direction = bestDirections[getRandomInt(0, bestDirections.length - 1)];\n        } else {\n            direction = switchDirection(map, { x, y }, direction);\n        }\n    }\n    ({ x, y } = transformMapCoordinates(map, { x: mapX, y: mapY }));\n    return {\n        direction,\n        mapY,\n        mapX,\n        x,\n        y\n    };\n};\n","import { N, E, S, W } from '../../directions';\nimport { virusSpeed } from '../../config';\n\nexport default ({ mapX, mapY, direction }) => {\n    switch (direction) {\n        case N:\n            return { mapX, mapY: mapY - virusSpeed };\n        case E:\n            return { mapX: mapX + virusSpeed, mapY };\n        case S:\n            return { mapX, mapY: mapY + virusSpeed };\n        case W:\n            return { mapX: mapX - virusSpeed, mapY };\n        default:\n            return { mapX, mapY };\n    }\n};\n","import { tileHeight, tileWidth } from '../../config';\n\nexport default ({ mapX, mapY }) => mapX % tileWidth === 0 && mapY % tileHeight === 0;\n","import { N, E, S, W } from '../../directions';\n\nexport default ({ viable, visits, row, col }) => {\n    let minVis = Number.MAX_SAFE_INTEGER;\n    return viable\n        .map(dir => {\n            let vis;\n            switch (dir) {\n                case N:\n                    vis = visits[row - 2][col - 1];\n                    break;\n                case E:\n                    vis = visits[row - 1][col];\n                    break;\n                case S:\n                    vis = visits[row][col - 1];\n                    break;\n                case W:\n                    vis = visits[row - 1][col - 2];\n                    break;\n                default:\n            }\n            minVis = vis < minVis ? vis : minVis;\n            return { dir, vis };\n        })\n        .filter(({ vis }) => vis === minVis)\n        .map(({ dir }) => dir);\n};\n","import { N, E, S, W } from '.';\n\nexport default direction => {\n    switch (direction) {\n        case N:\n            return S;\n        case E:\n            return W;\n        case S:\n            return N;\n        case W:\n            return W;\n        default:\n            return null;\n    }\n};\n","import { lightRed, darkRed } from '../config';\nimport { getRandomInt as ri } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightRed;\n    ctx.fillStyle = darkRed;\n    ctx.beginPath();\n    ctx.moveTo(ri(-5, 5), ri(-5, -25)); // 1\n    ctx.lineTo(ri(5, 50), ri(-5, -50)); // 2\n    ctx.lineTo(ri(5, 25), ri(-5, 5)); // 3\n    ctx.lineTo(ri(5, 50), ri(5, 50)); // 4\n    ctx.lineTo(ri(-5, 5), ri(5, 25)); // 5\n    ctx.lineTo(ri(-5, -50), ri(5, 50)); // 6\n    ctx.lineTo(ri(-5, -25), ri(-5, 5)); // 7\n    ctx.lineTo(ri(-5, -50), ri(-5, -50)); // 8\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { tileHeight, virusBlipTtl } from '../config';\nimport { drawBlip } from '.';\n\nexport default ({ x, y }) =>\n    kontra.sprite({\n        x,\n        y,\n        ttl: virusBlipTtl,\n        radius: tileHeight,\n        update() {\n            this.radius += 10;\n            this.ttl--;\n        },\n        render() {\n            drawBlip(this);\n        }\n    });\n","import { lightRed } from '../config';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, radius } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = lightRed;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, deg2rad(0), deg2rad(360));\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.restore();\n};\n","import { virusBlipInterval } from '../config';\nimport { createBlip } from '.';\n\nexport default class {\n    constructor() {\n        this.blips = [];\n    }\n\n    start(virus) {\n        setInterval(() => {\n            this.blips.push(createBlip({ x: virus.x, y: virus.y }));\n        }, virusBlipInterval);\n    }\n    update() {\n        this.blips.forEach(blip => blip.update());\n        this.blips = this.blips.filter(blip => blip.ttl > 0);\n    }\n    render() {\n        this.blips.forEach(blip => blip.render());\n    }\n}\n","/* global kontra */\n\nimport { collisionRadius, tileHeight, tileWidth } from '../config';\nimport { transformMapCoordinates } from '../utils';\nimport { drawBomb, updateBomb } from '.';\nimport { FUSE_BURNING } from '.';\n\nexport default (map, { row, col }) => {\n    const { x, y } = transformMapCoordinates(map, { row, col });\n    return kontra.sprite({\n        x,\n        y,\n        collisionRadius,\n        fuseLength: 100,\n        status: FUSE_BURNING,\n        shrapnel: [],\n        explosionDuration: 0,\n        map,\n        mapX: (col - 1) * tileWidth,\n        mapY: (row - 1) * tileHeight,\n        row,\n        col,\n        update() {\n            ({\n                status: this.status,\n                fuseLength: this.fuseLength,\n                explosionDuration: this.explosionDuration,\n                x: this.x,\n                y: this.y\n            } = updateBomb(this));\n        },\n        render() {\n            drawBomb(this);\n        }\n    });\n};\n","export const FUSE_BURNING = 0;\nexport const EXPLODING = 1;\nexport const EXPLODED = 2;\n","import { EXPLODING, FUSE_BURNING } from './constants';\nimport { drawBombWithFuse } from '.';\n\nexport default sprite => {\n    const { status, shrapnel } = sprite;\n    switch (status) {\n        case FUSE_BURNING:\n            drawBombWithFuse(sprite);\n            break;\n        case EXPLODING:\n            shrapnel.forEach(s => s.render());\n            break;\n        default:\n    }\n};\n","import { lightRed, lightBlue, darkBlue } from '../config';\nimport { getRandomInt as ri } from '../utils';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, fuseLength } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(deg2rad(-45));\n\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.fillStyle = darkBlue;\n\n    /* bomb */\n    ctx.beginPath();\n    ctx.moveTo(23, -10);\n    ctx.lineTo(40, -10);\n    ctx.lineTo(40, 10);\n    ctx.lineTo(23, 10);\n    ctx.arc(0, 0, 25, deg2rad(19), deg2rad(341));\n    ctx.fill();\n    ctx.stroke();\n\n    /* fuse */\n    const fuseRad = 25; // radius of the fuse arc\n    const fuseDeg = (fuseLength / 100) * 90; // length of the fuse arc in degrees\n    ctx.beginPath();\n    ctx.moveTo(40, 0);\n    ctx.arc(40, 25, fuseRad, deg2rad(270), deg2rad(270 + fuseDeg));\n    ctx.stroke();\n\n    /* sparks */\n    const sparkCX = Math.cos(deg2rad(fuseDeg - 90)) * fuseRad + 40; // X-coord of sparks center\n    const sparkCY = Math.sin(deg2rad(fuseDeg - 90)) * fuseRad + 25; // Y-coord of sparks centers\n    const sparkRad = 15; // radius of the sparks circle\n    ctx.fillStyle = lightRed;\n    for (let i = 0; i < 10; i++) {\n        const sparkX = Math.cos(deg2rad(ri(0, 360))) * ri(0, sparkRad) + sparkCX;\n        const sparkY = Math.sin(deg2rad(ri(0, 360))) * ri(0, sparkRad) + sparkCY;\n        ctx.fillRect(sparkX - 1, sparkY - 1, 3, 3);\n    }\n\n    ctx.restore();\n};\n","/* global kontra */\n\nimport { FUSE_BURNING, EXPLODING, EXPLODED } from '.';\nimport { createShrapnel } from '.';\nimport { transformMapCoordinates } from '../utils';\nimport { mapPaddingX, mapPaddingY } from '../config';\nimport { pubsub, BOMB_EXPLODES } from '../pubsub';\n\nexport default sprite => {\n    let { status, fuseLength, explosionDuration, x, y } = sprite;\n    const { shrapnel, map, mapX, mapY, row, col } = sprite;\n\n    ({ x, y } = transformMapCoordinates(map, { x: mapX, y: mapY }));\n    switch (status) {\n        case FUSE_BURNING:\n            fuseLength -= 1;\n            if (fuseLength < 0) {\n                status = EXPLODING;\n                pubsub.publish(BOMB_EXPLODES);\n                for (let i = 0; i < 50; i++) {\n                    shrapnel.push(createShrapnel({ x, y }));\n                }\n                const tile = map.tileAtLayer('main', { row: row + mapPaddingY - 1, col: col + mapPaddingX - 1 });\n                map.changeTile('main', { row: row + mapPaddingY, col: col + mapPaddingX }, tile + 24);\n            }\n            break;\n        case EXPLODING:\n            shrapnel.forEach(s => s.update());\n            explosionDuration++;\n            if (explosionDuration === 200) {\n                status = EXPLODED;\n            }\n            break;\n        default:\n    }\n    return {\n        status,\n        fuseLength,\n        explosionDuration,\n        x,\n        y\n    };\n};\n","/* global kontra */\nimport { getRandomInt as ri } from '../utils';\nimport { degreesToRadians as deg2rad } from '../utils';\nimport { drawShrapnel } from '.';\n\nexport default ({ x, y }) => {\n    const dir = ri(0, 360);\n    const speed = ri(5, 15);\n    return kontra.sprite({\n        x,\n        y,\n        dx: Math.cos(deg2rad(dir)) * speed,\n        dy: Math.sin(deg2rad(dir)) * speed,\n        rotation: ri(0, 360),\n        rotationDir: [ri(-10, -1), ri(1, 10)][ri(0, 1)],\n        update() {\n            this.advance();\n            this.rotation += this.rotationDir;\n        },\n        render() {\n            drawShrapnel(this);\n        }\n    });\n};\n","import { lightBlue, darkBlue } from '../config';\nimport { degreesToRadians as deg2rad } from '../utils';\n\nexport default sprite => {\n    const { context: ctx, x, y, rotation } = sprite;\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(deg2rad(rotation));\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = lightBlue;\n    ctx.fillStyle = darkBlue;\n    ctx.beginPath();\n    ctx.moveTo(0, -10);\n    ctx.lineTo(10, 5);\n    ctx.lineTo(-10, 5);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n};\n","/**\n * SfxrParams\n *\n * Copyright 2010 Thomas Vian\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author Thomas Vian\n */\nfunction SfxrParams() {\n  //--------------------------------------------------------------------------\n  //\n  //  Settings String Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Parses a settings array into the parameters\n   * @param array Array of the settings values, where elements 0 - 23 are\n   *                a: waveType\n   *                b: attackTime\n   *                c: sustainTime\n   *                d: sustainPunch\n   *                e: decayTime\n   *                f: startFrequency\n   *                g: minFrequency\n   *                h: slide\n   *                i: deltaSlide\n   *                j: vibratoDepth\n   *                k: vibratoSpeed\n   *                l: changeAmount\n   *                m: changeSpeed\n   *                n: squareDuty\n   *                o: dutySweep\n   *                p: repeatSpeed\n   *                q: phaserOffset\n   *                r: phaserSweep\n   *                s: lpFilterCutoff\n   *                t: lpFilterCutoffSweep\n   *                u: lpFilterResonance\n   *                v: hpFilterCutoff\n   *                w: hpFilterCutoffSweep\n   *                x: masterVolume\n   * @return If the string successfully parsed\n   */\n  this.setSettings = function(values)\n  {\n    for ( var i = 0; i < 24; i++ )\n    {\n      this[String.fromCharCode( 97 + i )] = values[i] || 0;\n    }\n\n    // I moved this here from the reset(true) function\n    if (this['c'] < .01) {\n      this['c'] = .01;\n    }\n\n    var totalTime = this['b'] + this['c'] + this['e'];\n    if (totalTime < .18) {\n      var multiplier = .18 / totalTime;\n      this['b']  *= multiplier;\n      this['c'] *= multiplier;\n      this['e']   *= multiplier;\n    }\n  }\n}\n\n/**\n * SfxrSynth\n *\n * Copyright 2010 Thomas Vian\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author Thomas Vian\n */\nfunction SfxrSynth() {\n  // All variables are kept alive through function closures\n\n  //--------------------------------------------------------------------------\n  //\n  //  Sound Parameters\n  //\n  //--------------------------------------------------------------------------\n\n  this._params = new SfxrParams();  // Params instance\n\n  //--------------------------------------------------------------------------\n  //\n  //  Synth Variables\n  //\n  //--------------------------------------------------------------------------\n\n  var _envelopeLength0, // Length of the attack stage\n      _envelopeLength1, // Length of the sustain stage\n      _envelopeLength2, // Length of the decay stage\n\n      _period,          // Period of the wave\n      _maxPeriod,       // Maximum period before sound stops (from minFrequency)\n\n      _slide,           // Note slide\n      _deltaSlide,      // Change in slide\n\n      _changeAmount,    // Amount to change the note by\n      _changeTime,      // Counter for the note change\n      _changeLimit,     // Once the time reaches this limit, the note changes\n\n      _squareDuty,      // Offset of center switching point in the square wave\n      _dutySweep;       // Amount to change the duty by\n\n  //--------------------------------------------------------------------------\n  //\n  //  Synth Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Resets the runing variables from the params\n   * Used once at the start (total reset) and for the repeat effect (partial reset)\n   */\n  this.reset = function() {\n    // Shorter reference\n    var p = this._params;\n\n    _period       = 100 / (p['f'] * p['f'] + .001);\n    _maxPeriod    = 100 / (p['g']   * p['g']   + .001);\n\n    _slide        = 1 - p['h'] * p['h'] * p['h'] * .01;\n    _deltaSlide   = -p['i'] * p['i'] * p['i'] * .000001;\n\n    if (!p['a']) {\n      _squareDuty = .5 - p['n'] / 2;\n      _dutySweep  = -p['o'] * .00005;\n    }\n\n    _changeAmount = p['l'] > 0 ? 1 - p['l'] * p['l'] * .9 : 1 + p['l'] * p['l'] * 10;\n    _changeTime   = 0;\n    _changeLimit  = p['m'] == 1 ? 0 : (1 - p['m']) * (1 - p['m']) * 20000 + 32;\n  }\n\n  // I split the reset() function into two functions for better readability\n  this.totalReset = function() {\n    this.reset();\n\n    // Shorter reference\n    var p = this._params;\n\n    // Calculating the length is all that remained here, everything else moved somewhere\n    _envelopeLength0 = p['b']  * p['b']  * 100000;\n    _envelopeLength1 = p['c'] * p['c'] * 100000;\n    _envelopeLength2 = p['e']   * p['e']   * 100000 + 10;\n    // Full length of the volume envelop (and therefore sound)\n    return _envelopeLength0 + _envelopeLength1 + _envelopeLength2 | 0;\n  }\n\n  /**\n   * Writes the wave to the supplied buffer ByteArray\n   * @param buffer A ByteArray to write the wave to\n   * @return If the wave is finished\n   */\n  this.synthWave = function(buffer, length) {\n    // Shorter reference\n    var p = this._params;\n\n    // If the filters are active\n    var _filters = p['s'] != 1 || p['v'],\n        // Cutoff multiplier which adjusts the amount the wave position can move\n        _hpFilterCutoff = p['v'] * p['v'] * .1,\n        // Speed of the high-pass cutoff multiplier\n        _hpFilterDeltaCutoff = 1 + p['w'] * .0003,\n        // Cutoff multiplier which adjusts the amount the wave position can move\n        _lpFilterCutoff = p['s'] * p['s'] * p['s'] * .1,\n        // Speed of the low-pass cutoff multiplier\n        _lpFilterDeltaCutoff = 1 + p['t'] * .0001,\n        // If the low pass filter is active\n        _lpFilterOn = p['s'] != 1,\n        // masterVolume * masterVolume (for quick calculations)\n        _masterVolume = p['x'] * p['x'],\n        // Minimum frequency before stopping\n        _minFreqency = p['g'],\n        // If the phaser is active\n        _phaser = p['q'] || p['r'],\n        // Change in phase offset\n        _phaserDeltaOffset = p['r'] * p['r'] * p['r'] * .2,\n        // Phase offset for phaser effect\n        _phaserOffset = p['q'] * p['q'] * (p['q'] < 0 ? -1020 : 1020),\n        // Once the time reaches this limit, some of the    iables are reset\n        _repeatLimit = p['p'] ? ((1 - p['p']) * (1 - p['p']) * 20000 | 0) + 32 : 0,\n        // The punch factor (louder at begining of sustain)\n        _sustainPunch = p['d'],\n        // Amount to change the period of the wave by at the peak of the vibrato wave\n        _vibratoAmplitude = p['j'] / 2,\n        // Speed at which the vibrato phase moves\n        _vibratoSpeed = p['k'] * p['k'] * .01,\n        // The type of wave to generate\n        _waveType = p['a'];\n\n    var _envelopeLength      = _envelopeLength0,     // Length of the current envelope stage\n        _envelopeOverLength0 = 1 / _envelopeLength0, // (for quick calculations)\n        _envelopeOverLength1 = 1 / _envelopeLength1, // (for quick calculations)\n        _envelopeOverLength2 = 1 / _envelopeLength2; // (for quick calculations)\n\n    // Damping muliplier which restricts how fast the wave position can move\n    var _lpFilterDamping = 5 / (1 + p['u'] * p['u'] * 20) * (.01 + _lpFilterCutoff);\n    if (_lpFilterDamping > .8) {\n      _lpFilterDamping = .8;\n    }\n    _lpFilterDamping = 1 - _lpFilterDamping;\n\n    var _finished = false,     // If the sound has finished\n        _envelopeStage    = 0, // Current stage of the envelope (attack, sustain, decay, end)\n        _envelopeTime     = 0, // Current time through current enelope stage\n        _envelopeVolume   = 0, // Current volume of the envelope\n        _hpFilterPos      = 0, // Adjusted wave position after high-pass filter\n        _lpFilterDeltaPos = 0, // Change in low-pass wave position, as allowed by the cutoff and damping\n        _lpFilterOldPos,       // Previous low-pass wave position\n        _lpFilterPos      = 0, // Adjusted wave position after low-pass filter\n        _periodTemp,           // Period modified by vibrato\n        _phase            = 0, // Phase through the wave\n        _phaserInt,            // Integer phaser offset, for bit maths\n        _phaserPos        = 0, // Position through the phaser buffer\n        _pos,                  // Phase expresed as a Number from 0-1, used for fast sin approx\n        _repeatTime       = 0, // Counter for the repeats\n        _sample,               // Sub-sample calculated 8 times per actual sample, averaged out to get the super sample\n        _superSample,          // Actual sample writen to the wave\n        _vibratoPhase     = 0; // Phase through the vibrato sine wave\n\n    // Buffer of wave values used to create the out of phase second wave\n    var _phaserBuffer = new Array(1024),\n        // Buffer of random values used to generate noise\n        _noiseBuffer  = new Array(32);\n    for (var i = _phaserBuffer.length; i--; ) {\n      _phaserBuffer[i] = 0;\n    }\n    for (var i = _noiseBuffer.length; i--; ) {\n      _noiseBuffer[i] = Math.random() * 2 - 1;\n    }\n\n    for (var i = 0; i < length; i++) {\n      if (_finished) {\n        return i;\n      }\n\n      // Repeats every _repeatLimit times, partially resetting the sound parameters\n      if (_repeatLimit) {\n        if (++_repeatTime >= _repeatLimit) {\n          _repeatTime = 0;\n          this.reset();\n        }\n      }\n\n      // If _changeLimit is reached, shifts the pitch\n      if (_changeLimit) {\n        if (++_changeTime >= _changeLimit) {\n          _changeLimit = 0;\n          _period *= _changeAmount;\n        }\n      }\n\n      // Acccelerate and apply slide\n      _slide += _deltaSlide;\n      _period *= _slide;\n\n      // Checks for frequency getting too low, and stops the sound if a minFrequency was set\n      if (_period > _maxPeriod) {\n        _period = _maxPeriod;\n        if (_minFreqency > 0) {\n          _finished = true;\n        }\n      }\n\n      _periodTemp = _period;\n\n      // Applies the vibrato effect\n      if (_vibratoAmplitude > 0) {\n        _vibratoPhase += _vibratoSpeed;\n        _periodTemp *= 1 + Math.sin(_vibratoPhase) * _vibratoAmplitude;\n      }\n\n      _periodTemp |= 0;\n      if (_periodTemp < 8) {\n        _periodTemp = 8;\n      }\n\n      // Sweeps the square duty\n      if (!_waveType) {\n        _squareDuty += _dutySweep;\n        if (_squareDuty < 0) {\n          _squareDuty = 0;\n        } else if (_squareDuty > .5) {\n          _squareDuty = .5;\n        }\n      }\n\n      // Moves through the different stages of the volume envelope\n      if (++_envelopeTime > _envelopeLength) {\n        _envelopeTime = 0;\n\n        switch (++_envelopeStage)  {\n          case 1:\n            _envelopeLength = _envelopeLength1;\n            break;\n          case 2:\n            _envelopeLength = _envelopeLength2;\n        }\n      }\n\n      // Sets the volume based on the position in the envelope\n      switch (_envelopeStage) {\n        case 0:\n          _envelopeVolume = _envelopeTime * _envelopeOverLength0;\n          break;\n        case 1:\n          _envelopeVolume = 1 + (1 - _envelopeTime * _envelopeOverLength1) * 2 * _sustainPunch;\n          break;\n        case 2:\n          _envelopeVolume = 1 - _envelopeTime * _envelopeOverLength2;\n          break;\n        case 3:\n          _envelopeVolume = 0;\n          _finished = true;\n      }\n\n      // Moves the phaser offset\n      if (_phaser) {\n        _phaserOffset += _phaserDeltaOffset;\n        _phaserInt = _phaserOffset | 0;\n        if (_phaserInt < 0) {\n          _phaserInt = -_phaserInt;\n        } else if (_phaserInt > 1023) {\n          _phaserInt = 1023;\n        }\n      }\n\n      // Moves the high-pass filter cutoff\n      if (_filters && _hpFilterDeltaCutoff) {\n        _hpFilterCutoff *= _hpFilterDeltaCutoff;\n        if (_hpFilterCutoff < .00001) {\n          _hpFilterCutoff = .00001;\n        } else if (_hpFilterCutoff > .1) {\n          _hpFilterCutoff = .1;\n        }\n      }\n\n      _superSample = 0;\n      for (var j = 8; j--; ) {\n        // Cycles through the period\n        _phase++;\n        if (_phase >= _periodTemp) {\n          _phase %= _periodTemp;\n\n          // Generates new random noise for this period\n          if (_waveType == 3) {\n            for (var n = _noiseBuffer.length; n--; ) {\n              _noiseBuffer[n] = Math.random() * 2 - 1;\n            }\n          }\n        }\n\n        // Gets the sample from the oscillator\n        switch (_waveType) {\n          case 0: // Square wave\n            _sample = ((_phase / _periodTemp) < _squareDuty) ? .5 : -.5;\n            break;\n          case 1: // Saw wave\n            _sample = 1 - _phase / _periodTemp * 2;\n            break;\n          case 2: // Sine wave (fast and accurate approx)\n            _pos = _phase / _periodTemp;\n            _pos = _pos > .5 ? (_pos - 1) * 6.28318531 : _pos * 6.28318531;\n            _sample = _pos < 0 ? 1.27323954 * _pos + .405284735 * _pos * _pos : 1.27323954 * _pos - .405284735 * _pos * _pos;\n            _sample = _sample < 0 ? .225 * (_sample *-_sample - _sample) + _sample : .225 * (_sample * _sample - _sample) + _sample;\n            break;\n          case 3: // Noise\n            _sample = _noiseBuffer[Math.abs(_phase * 32 / _periodTemp | 0)];\n        }\n\n        // Applies the low and high pass filters\n        if (_filters) {\n          _lpFilterOldPos = _lpFilterPos;\n          _lpFilterCutoff *= _lpFilterDeltaCutoff;\n          if (_lpFilterCutoff < 0) {\n            _lpFilterCutoff = 0;\n          } else if (_lpFilterCutoff > .1) {\n            _lpFilterCutoff = .1;\n          }\n\n          if (_lpFilterOn) {\n            _lpFilterDeltaPos += (_sample - _lpFilterPos) * _lpFilterCutoff;\n            _lpFilterDeltaPos *= _lpFilterDamping;\n          } else {\n            _lpFilterPos = _sample;\n            _lpFilterDeltaPos = 0;\n          }\n\n          _lpFilterPos += _lpFilterDeltaPos;\n\n          _hpFilterPos += _lpFilterPos - _lpFilterOldPos;\n          _hpFilterPos *= 1 - _hpFilterCutoff;\n          _sample = _hpFilterPos;\n        }\n\n        // Applies the phaser effect\n        if (_phaser) {\n          _phaserBuffer[_phaserPos % 1024] = _sample;\n          _sample += _phaserBuffer[(_phaserPos - _phaserInt + 1024) % 1024];\n          _phaserPos++;\n        }\n\n        _superSample += _sample;\n      }\n\n      // Averages out the super samples and applies volumes\n      _superSample *= .125 * _envelopeVolume * _masterVolume;\n\n      // Clipping if too loud\n      buffer[i] = _superSample >= 1 ? 32767 : _superSample <= -1 ? -32768 : _superSample * 32767 | 0;\n    }\n\n    return length;\n  }\n}\n\n// Adapted from http://codebase.es/riffwave/\nvar synth = new SfxrSynth();\n// Export for the Closure Compiler\nexport default function(settings) {\n  // Initialize SfxrParams\n  synth._params.setSettings(settings);\n  // Synthesize Wave\n  var envelopeFullLength = synth.totalReset();\n  var data = new Uint8Array(((envelopeFullLength + 1) / 2 | 0) * 4 + 44);\n  var used = synth.synthWave(new Uint16Array(data.buffer, 44), envelopeFullLength) * 2;\n  var dv = new Uint32Array(data.buffer, 0, 44);\n  // Initialize header\n  dv[0] = 0x46464952; // \"RIFF\"\n  dv[1] = used + 36;  // put total size here\n  dv[2] = 0x45564157; // \"WAVE\"\n  dv[3] = 0x20746D66; // \"fmt \"\n  dv[4] = 0x00000010; // size of the following\n  dv[5] = 0x00010001; // Mono: 1 channel, PCM format\n  dv[6] = 0x0000AC44; // 44,100 samples per second\n  dv[7] = 0x00015888; // byte rate: two bytes per sample\n  dv[8] = 0x00100002; // 16 bits per sample, aligned on every two bytes\n  dv[9] = 0x61746164; // \"data\"\n  dv[10] = used;      // put number of samples here\n\n  // Base64 encoding written by me, @maettig\n  used += 44;\n  var i = 0,\n      base64Characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n      output = 'data:audio/wav;base64,';\n  for (; i < used; i += 3)\n  {\n    var a = data[i] << 16 | data[i + 1] << 8 | data[i + 2];\n    output += base64Characters[a >> 18] + base64Characters[a >> 12 & 63] + base64Characters[a >> 6 & 63] + base64Characters[a & 63];\n  }\n  i -= used;\n  return output.slice(0, output.length - i) + '=='.slice(0, i);\n}\n","import { pubsub, DROP_BOMB, BOMB_EXPLODES, INFECTED, GAME_OVER } from '../pubsub';\nimport jsfxr from './sfxr';\n\nfunction ArcadeAudio() {\n  this.sounds = {};\n}\n\nArcadeAudio.prototype.add = function( key, count, settings ) {\n  this.sounds[ key ] = [];\n  settings.forEach( function( elem, index ) {\n    this.sounds[ key ].push( {\n      tick: 0,\n      count: count,\n      pool: []\n    } );\n    for( var i = 0; i < count; i++ ) {\n      var audio = new Audio();\n      audio.src = jsfxr( elem );\n      this.sounds[ key ][ index ].pool.push( audio );\n    }\n  }, this );\n};\n\nArcadeAudio.prototype.play = function( key ) {\n  var sound = this.sounds[ key ];\n  var soundData = sound.length > 1 ? sound[ Math.floor( Math.random() * sound.length ) ] : sound[ 0 ];\n  soundData.pool[ soundData.tick ].play();\n  soundData.tick < soundData.count - 1 ? soundData.tick++ : soundData.tick = 0;\n};\n\nvar aa = new ArcadeAudio();\n\naa.add( 'powerup', 10,\n    [\n      [2,,0.2916,,0.2587,0.9356,0.3909,-0.2493,,,,,,0.3583,0.1617,,,,1,,,0.1217,,0.5]\n    ]\n);\n\naa.add( 'damage', 3,\n    [\n      [3,,0.0138,,0.2701,0.4935,,-0.6881,,,,,,,,,,,1,,,,,0.25],\n      [0,,0.0639,,0.2425,0.7582,,-0.6217,,,,,,0.4039,,,,,1,,,,,0.25],\n      [3,,0.0948,,0.2116,0.7188,,-0.6372,,,,,,,,,,,1,,,0.2236,,0.25],\n      [3,,0.1606,0.5988,0.2957,0.1157,,-0.3921,,,,,,,,,0.3225,-0.2522,1,,,,,0.25],\n      [3,,0.1726,0.2496,0.2116,0.0623,,-0.2096,,,,,,,,,0.2665,-0.1459,1,,,,,0.25],\n      [3,,0.1645,0.7236,0.3402,0.0317,,,,,,,,,,,,,1,,,,,0.25]\n    ]\n);\n\n\nexport function initAudio() {\n  pubsub.subscribe(DROP_BOMB, () => aa.play('powerup'));\n  pubsub.subscribe(BOMB_EXPLODES, () => aa.play('damage'));\n  pubsub.subscribe(INFECTED, () => aa.play('damage'));\n  // pubsub.subscribe(GAME_OVER, () => sounds.hitHurt.play()); // game over is published more than once\n\n  /*\n   * GENERATE NEW SOUNDS ON http://www.superflashbros.net/as3sfxr/\n   * CMD + C copies the values\n   *\n   * */\n}\n","/* global kontra */\n\nimport { createCanvas } from './canvas';\nimport { createLoop } from './loop';\nimport { createMap } from './map';\nimport { createPlayer } from './player';\nimport { Users } from './user';\nimport { createVirus } from './virus';\nimport { Bombs } from './bomb';\nimport { initAudio } from './audio2';\n\nif (process.env.NODE_ENV === 'development') {\n    require('./devbox/createDevbox').default();\n}\n\n(async () => {\n    createCanvas();\n    kontra.init();\n    const map = await createMap();\n    const player = createPlayer(map);\n    const virus = createVirus(map);\n    const bombs = new Bombs(map);\n    const users = new Users(map);\n    const loop = createLoop({ map, player, virus, users, bombs });\n    initAudio();\n    loop.start();\n})();\n","import { canvasHeight, canvasWidth, lightBlue } from '../config';\n\nexport default () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvas.style.cssText = `\n        border: 4px solid ${lightBlue};\n    `;\n    const wrapper = document.getElementById('wrapper');\n    wrapper.appendChild(canvas);\n};\n","import { pubsub, DROP_BOMB, BOMB_EXPLODES } from '../pubsub';\nimport { EXPLODED } from './constants';\nimport { createBomb } from '.';\n\nexport default class {\n    constructor(map) {\n        this.map = map;\n        this.bombs = [];\n        pubsub.subscribe(DROP_BOMB, mapCoords => this.dropBomb(mapCoords));\n    }\n    dropBomb(mapCoords) {\n        if (\n            this.bombs.length > 0 &&\n            this.bombs.find(({ col, row }) => col === mapCoords.col && row === mapCoords.row)\n        ) {\n            // don't drop a bomb where there already is one waiting to explode\n            return;\n        }\n        this.bombs.push(createBomb(this.map, mapCoords));\n    }\n    update() {\n        this.bombs = this.bombs.filter(bomb => {\n            bomb.update();\n            return bomb.status !== EXPLODED;\n        });\n    }\n    render() {\n        this.bombs.forEach(bomb => bomb.render());\n    }\n}\n","import { createUser, INFECTED } from '.';\nimport { mapHeight, mapWidth, mapPaddingX, mapPaddingY } from '../config';\nimport { multiCollides } from '../utils';\nimport { allInfected } from './utils';\nimport { pubsub, GAME_OVER } from '../pubsub';\nimport { messageBox } from '../messageBox';\n\nexport default class {\n    constructor(map) {\n        this.map = map;\n        this.users = [];\n        this.gameOver = false;\n        for (let row = 1; row <= mapHeight + mapPaddingY * 2; row++) {\n            for (let col = 1; col <= mapWidth + mapPaddingX * 2; col++) {\n                const tile = map.tileAtLayer('main', { row, col });\n                if (tile >= 17 && tile <= 20) {\n                    this.users.push(createUser({ map, row: row - mapPaddingY + 1, col: col - mapPaddingX + 1 }));\n                }\n            }\n        }\n        pubsub.subscribe(GAME_OVER, () => (this.gameOver = true));\n    }\n    update() {\n        this.users.forEach(user => user.update());\n    }\n    render() {\n        this.users.forEach(user => user.render());\n    }\n    infect(viruses) {\n        const { users, gameOver } = this;\n        const userVirusCollisions = multiCollides(users, viruses).filter(([user]) => user.status !== INFECTED);\n        if (userVirusCollisions.length === 0) {\n            return;\n        }\n        userVirusCollisions.forEach(([user]) => user.infect());\n        if (gameOver) {\n            return;\n        }\n        if (allInfected(users)) {\n            messageBox.show('all users infected<br>game over');\n            pubsub.publish(GAME_OVER);\n            return;\n        }\n        messageBox.flash('user infected!');\n    }\n}\n","import { collides } from '.';\n\nexport default (arr1, arr2) => {\n    const collisions = [];\n    for (let i1 = 0; i1 < arr1.length; i1++) {\n        const sprite1 = arr1[i1];\n        for (let i2 = 0; i2 < arr2.length; i2++) {\n            const sprite2 = arr2[i2];\n            if (collides(sprite1, sprite2)) {\n                collisions.push([sprite1, sprite2]);\n            }\n        }\n    }\n    return collisions;\n};\n"],"sourceRoot":""}